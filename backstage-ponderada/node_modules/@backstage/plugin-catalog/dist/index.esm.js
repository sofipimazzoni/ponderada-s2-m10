import { D as DefaultStarredEntitiesApi, b as DefaultEntityPresentationApi, r as rootRouteRef, c as createComponentRouteRef, v as viewTechDocRouteRef, a as createFromTemplateRouteRef, u as unregisterRedirectRouteRef } from './esm/routes-D5H5grpG.esm.js';
export { a as AboutContent, b as AboutField } from './esm/AboutCard-DxbQJUXT.esm.js';
import React, { useMemo, useState, useEffect } from 'react';
import InputBase from '@material-ui/core/InputBase';
import MenuItem from '@material-ui/core/MenuItem';
import Select from '@material-ui/core/Select';
import { makeStyles, createStyles } from '@material-ui/core/styles';
import { catalogApiRef, useEntityList, EntityKindFilter, CatalogFilterLayout, starredEntitiesApiRef, entityPresentationApiRef, entityRouteRef } from '@backstage/plugin-catalog-react';
import pluralize from 'pluralize';
import { useApi, createPlugin, createApiFactory, discoveryApiRef, fetchApiRef, storageApiRef, createRoutableExtension, createComponentExtension } from '@backstage/core-plugin-api';
import useAsync from 'react-use/esm/useAsync';
export { C as CatalogTable } from './esm/CatalogTable-B8071eCT.esm.js';
export { E as EntityLayout } from './esm/EntityLayout-DJ8fmLlG.esm.js';
export { a as EntityOrphanWarning, d as EntityProcessingErrorsPanel, b as EntityRelationWarning, E as EntitySwitch, c as hasCatalogProcessingErrors, h as hasRelationWarnings, i as isOrphan } from './esm/EntitySwitch-D82_YYhG.esm.js';
export { h as hasLabels } from './esm/conditions-D3nrPoMz.esm.js';
import { CatalogClient } from '@backstage/catalog-client';
import { createSearchResultListItemExtension } from '@backstage/plugin-search-react';
import '@backstage/catalog-model';
import '@backstage/types';
import 'dataloader';
import 'expiry-map';
import 'zen-observable';
import '@material-ui/icons/Apartment';
import '@material-ui/icons/Category';
import '@material-ui/icons/Extension';
import '@material-ui/icons/FeaturedPlayList';
import '@material-ui/icons/LocationOn';
import '@material-ui/icons/Memory';
import '@material-ui/icons/People';
import '@material-ui/icons/Person';
import '@material-ui/icons/Storage';
import 'lodash';
import '@material-ui/core/Card';
import '@material-ui/core/CardContent';
import '@material-ui/core/CardHeader';
import '@material-ui/core/Divider';
import '@material-ui/core/IconButton';
import '@backstage/core-components';
import '@backstage/integration-react';
import '@material-ui/core/Chip';
import '@material-ui/core/Grid';
import '@material-ui/core/Typography';
import './esm/LinksGridList-Cm-4R9mq.esm.js';
import '@material-ui/core/ImageList';
import '@material-ui/core/ImageListItem';
import '@material-ui/core/Box';
import '@material-ui/icons/Language';
import '@material-ui/core/useMediaQuery';
import '@material-ui/icons/Cached';
import '@material-ui/icons/AddCircleOutline';
import '@material-ui/icons/Description';
import '@material-ui/icons/Edit';
import '@backstage/plugin-scaffolder-common';
import '@backstage/plugin-catalog-react/alpha';
import '@backstage/plugin-catalog-common/alpha';
import 'react-use/lib/useAsync';
import '@mui/utils';
import '@material-ui/icons/OpenInNew';
import '@material-ui/icons/Star';
import '@material-ui/icons/StarBorder';
import '@material-ui/core/Toolbar';
import '@material-ui/lab/Alert';
import 'react-router-dom';
import '@material-ui/core/ListItemIcon';
import '@material-ui/core/ListItemText';
import '@material-ui/core/MenuList';
import '@material-ui/core/Popover';
import '@material-ui/core/Tooltip';
import '@material-ui/icons/BugReport';
import '@material-ui/icons/MoreVert';
import '@material-ui/icons/FileCopyTwoTone';
import '@material-ui/icons/Cancel';
import 'react-use/esm/useCopyToClipboard';
import '@material-ui/core/Button';
import '@material-ui/core/Dialog';
import '@material-ui/core/DialogActions';
import '@material-ui/core/DialogTitle';
import '@backstage/errors';

function useAllKinds() {
  const catalogApi = useApi(catalogApiRef);
  const {
    error,
    loading,
    value: allKinds
  } = useAsync(async () => {
    const items = await catalogApi.getEntityFacets({ facets: ["kind"] }).then((response) => {
      var _a;
      return ((_a = response.facets.kind) == null ? void 0 : _a.map((f) => f.value).sort()) || [];
    });
    return items;
  }, [catalogApi]);
  return { loading, error, allKinds: allKinds != null ? allKinds : [] };
}
function filterKinds(allKinds, allowedKinds, forcedKinds) {
  let availableKinds = allKinds;
  if (allowedKinds) {
    availableKinds = availableKinds.filter(
      (k) => allowedKinds.some(
        (a) => a.toLocaleLowerCase("en-US") === k.toLocaleLowerCase("en-US")
      )
    );
  }
  if (forcedKinds && !allKinds.some(
    (a) => a.toLocaleLowerCase("en-US") === forcedKinds.toLocaleLowerCase("en-US")
  )) {
    availableKinds = availableKinds.concat([forcedKinds]);
  }
  const kindsMap = availableKinds.sort().reduce((acc, kind) => {
    acc[kind.toLocaleLowerCase("en-US")] = kind;
    return acc;
  }, {});
  return kindsMap;
}

const useStyles = makeStyles(
  (theme) => createStyles({
    root: {
      ...theme.typography.h4
    }
  })
);
function CatalogKindHeader(props) {
  var _a, _b;
  const { initialFilter = "component", allowedKinds } = props;
  const classes = useStyles();
  const { allKinds } = useAllKinds();
  const {
    filters,
    updateFilters,
    queryParameters: { kind: kindParameter }
  } = useEntityList();
  const queryParamKind = useMemo(
    () => [kindParameter].flat()[0],
    [kindParameter]
  );
  const [selectedKind, setSelectedKind] = useState(
    (_b = queryParamKind != null ? queryParamKind : (_a = filters.kind) == null ? void 0 : _a.value) != null ? _b : initialFilter
  );
  useEffect(() => {
    if (queryParamKind) {
      setSelectedKind(queryParamKind);
    }
  }, [queryParamKind]);
  useEffect(() => {
    var _a2, _b2;
    if ((_a2 = filters.kind) == null ? void 0 : _a2.value) {
      setSelectedKind((_b2 = filters.kind) == null ? void 0 : _b2.value);
    }
  }, [filters.kind]);
  useEffect(() => {
    updateFilters({
      kind: selectedKind ? new EntityKindFilter(selectedKind) : void 0
    });
  }, [selectedKind, updateFilters]);
  const options = filterKinds(allKinds, allowedKinds, selectedKind);
  return /* @__PURE__ */ React.createElement(
    Select,
    {
      input: /* @__PURE__ */ React.createElement(InputBase, null),
      value: selectedKind.toLocaleLowerCase("en-US"),
      onChange: (e) => setSelectedKind(e.target.value),
      classes
    },
    Object.keys(options).map((kind) => /* @__PURE__ */ React.createElement(MenuItem, { value: kind, key: kind }, `${pluralize(options[kind])}`))
  );
}

function strCmp(a, b) {
  return Boolean(
    a && typeof a === "string" && (a == null ? void 0 : a.toLocaleLowerCase("en-US")) === (b == null ? void 0 : b.toLocaleLowerCase("en-US"))
  );
}
function strCmpAll(value, cmpValues) {
  return typeof cmpValues === "string" ? strCmp(value, cmpValues) : cmpValues.length === 0 || cmpValues.some((cmpVal) => strCmp(value, cmpVal));
}
function isKind(kinds) {
  return isEntityWith({ kind: kinds });
}
function isComponentType(types) {
  return isEntityWith({ kind: "component", type: types });
}
function isResourceType(types) {
  return isEntityWith({ kind: "resource", type: types });
}
function isApiType(types) {
  return isEntityWith({ kind: "api", type: types });
}
function isEntityWith(predicate) {
  return (entity) => {
    var _a;
    if (predicate.kind && !strCmpAll(entity.kind, predicate.kind)) {
      return false;
    }
    if (predicate.type && !strCmpAll((_a = entity.spec) == null ? void 0 : _a.type, predicate.type)) {
      return false;
    }
    return true;
  };
}
function isNamespace(namespaces) {
  return (entity) => {
    var _a;
    return strCmpAll((_a = entity.metadata) == null ? void 0 : _a.namespace, namespaces);
  };
}

const FilteredEntityLayout = CatalogFilterLayout;
const FilterContainer = CatalogFilterLayout.Filters;
const EntityListContainer = CatalogFilterLayout.Content;

const catalogPlugin = createPlugin({
  id: "catalog",
  apis: [
    createApiFactory({
      api: catalogApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        fetchApi: fetchApiRef
      },
      factory: ({ discoveryApi, fetchApi }) => new CatalogClient({ discoveryApi, fetchApi })
    }),
    createApiFactory({
      api: starredEntitiesApiRef,
      deps: { storageApi: storageApiRef },
      factory: ({ storageApi }) => new DefaultStarredEntitiesApi({ storageApi })
    }),
    createApiFactory({
      api: entityPresentationApiRef,
      deps: { catalogApi: catalogApiRef },
      factory: ({ catalogApi }) => DefaultEntityPresentationApi.create({ catalogApi })
    })
  ],
  routes: {
    catalogIndex: rootRouteRef,
    catalogEntity: entityRouteRef
  },
  externalRoutes: {
    createComponent: createComponentRouteRef,
    viewTechDoc: viewTechDocRouteRef,
    createFromTemplate: createFromTemplateRouteRef,
    unregisterRedirect: unregisterRedirectRouteRef
  }
});
const CatalogIndexPage = catalogPlugin.provide(
  createRoutableExtension({
    name: "CatalogIndexPage",
    component: () => import('./esm/index-B9rsO45f.esm.js').then((m) => m.CatalogPage),
    mountPoint: rootRouteRef
  })
);
const CatalogEntityPage = catalogPlugin.provide(
  createRoutableExtension({
    name: "CatalogEntityPage",
    component: () => import('./esm/index-Bm618vm6.esm.js').then((m) => m.CatalogEntityPage),
    mountPoint: entityRouteRef
  })
);
const EntityAboutCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityAboutCard",
    component: {
      lazy: () => import('./esm/index-CTye7k-V.esm.js').then((m) => m.AboutCard)
    }
  })
);
const EntityLinksCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityLinksCard",
    component: {
      lazy: () => import('./esm/index-G-F7Xm_y.esm.js').then((m) => m.EntityLinksCard)
    }
  })
);
const EntityLabelsCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityLabelsCard",
    component: {
      lazy: () => import('./esm/index-B-CCESaQ.esm.js').then((m) => m.EntityLabelsCard)
    }
  })
);
const EntityHasSystemsCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityHasSystemsCard",
    component: {
      lazy: () => import('./esm/index-D5HvChUh.esm.js').then((m) => m.HasSystemsCard)
    }
  })
);
const EntityHasComponentsCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityHasComponentsCard",
    component: {
      lazy: () => import('./esm/index-Cj8OffZ7.esm.js').then((m) => m.HasComponentsCard)
    }
  })
);
const EntityHasSubcomponentsCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityHasSubcomponentsCard",
    component: {
      lazy: () => import('./esm/index-BiuwwYop.esm.js').then(
        (m) => m.HasSubcomponentsCard
      )
    }
  })
);
const EntityHasResourcesCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityHasResourcesCard",
    component: {
      lazy: () => import('./esm/index-BfN39k1W.esm.js').then((m) => m.HasResourcesCard)
    }
  })
);
const EntityDependsOnComponentsCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityDependsOnComponentsCard",
    component: {
      lazy: () => import('./esm/index-IXphZwiH.esm.js').then(
        (m) => m.DependsOnComponentsCard
      )
    }
  })
);
const EntityDependencyOfComponentsCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityDependencyOfComponentsCard",
    component: {
      lazy: () => import('./esm/index-DFrq3QtE.esm.js').then(
        (m) => m.DependencyOfComponentsCard
      )
    }
  })
);
const EntityDependsOnResourcesCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityDependsOnResourcesCard",
    component: {
      lazy: () => import('./esm/index-1Ncw0nQK.esm.js').then(
        (m) => m.DependsOnResourcesCard
      )
    }
  })
);
const RelatedEntitiesCard = catalogPlugin.provide(
  createComponentExtension({
    name: "RelatedEntitiesCard",
    component: {
      lazy: () => import('./esm/index-CitDuTEL.esm.js').then(
        (m) => m.RelatedEntitiesCard
      )
    }
  })
);
const CatalogSearchResultListItem = catalogPlugin.provide(
  createSearchResultListItemExtension({
    name: "CatalogSearchResultListItem",
    component: () => import('./esm/index-Deu-nY7x.esm.js').then(
      (m) => m.CatalogSearchResultListItem
    ),
    predicate: (result) => result.type === "software-catalog"
  })
);

export { CatalogEntityPage, CatalogIndexPage, CatalogKindHeader, CatalogSearchResultListItem, DefaultEntityPresentationApi, DefaultStarredEntitiesApi, EntityAboutCard, EntityDependencyOfComponentsCard, EntityDependsOnComponentsCard, EntityDependsOnResourcesCard, EntityHasComponentsCard, EntityHasResourcesCard, EntityHasSubcomponentsCard, EntityHasSystemsCard, EntityLabelsCard, EntityLinksCard, EntityListContainer, FilterContainer, FilteredEntityLayout, RelatedEntitiesCard, catalogPlugin, isApiType, isComponentType, isEntityWith, isKind, isNamespace, isResourceType };
//# sourceMappingURL=index.esm.js.map

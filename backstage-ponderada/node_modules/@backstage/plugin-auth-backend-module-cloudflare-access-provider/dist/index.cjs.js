'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var pluginAuthNode = require('@backstage/plugin-auth-node');
var errors = require('@backstage/errors');
var jose = require('jose');
var backendPluginApi = require('@backstage/backend-plugin-api');

const CF_JWT_HEADER = "cf-access-jwt-assertion";
const COOKIE_AUTH_NAME = "CF_Authorization";
const CACHE_PREFIX = "providers/cloudflare-access/profile-v1";

class AuthHelper {
  constructor(teamName, serviceTokens, keySet, cache) {
    this.teamName = teamName;
    this.serviceTokens = serviceTokens;
    this.keySet = keySet;
    this.cache = cache;
  }
  static fromConfig(config, options) {
    var _a, _b;
    const teamName = config.getString("teamName");
    const serviceTokens = (_b = (_a = config.getOptionalConfigArray("serviceTokens")) != null ? _a : []) == null ? void 0 : _b.map((cfg) => {
      return {
        token: cfg.getString("token"),
        subject: cfg.getString("subject")
      };
    });
    const keySet = jose.createRemoteJWKSet(
      new URL(`https://${teamName}.cloudflareaccess.com/cdn-cgi/access/certs`)
    );
    return new AuthHelper(teamName, serviceTokens, keySet, options == null ? void 0 : options.cache);
  }
  async authenticate(req) {
    var _a, _b;
    let jwt = req.header(CF_JWT_HEADER);
    if (!jwt) {
      jwt = req.cookies.CF_Authorization;
    }
    if (!jwt) {
      throw new errors.AuthenticationError(
        `Missing ${CF_JWT_HEADER} from Cloudflare Access`
      );
    }
    const verifyResult = await jose.jwtVerify(jwt, this.keySet, {
      issuer: `https://${this.teamName}.cloudflareaccess.com`
    });
    const isServiceToken = !verifyResult.payload.sub;
    const subject = isServiceToken ? verifyResult.payload.common_name : verifyResult.payload.sub;
    if (!subject) {
      throw new errors.AuthenticationError(
        `Missing both sub and common_name from Cloudflare Access JWT`
      );
    }
    const serviceToken = this.serviceTokens.find((st) => st.token === subject);
    if (isServiceToken && !serviceToken) {
      throw new errors.AuthenticationError(
        `${subject} is not a permitted Service Token.`
      );
    }
    const cacheKey = `${CACHE_PREFIX}/${subject}`;
    const cfAccessResultStr = await ((_a = this.cache) == null ? void 0 : _a.get(cacheKey));
    if (typeof cfAccessResultStr === "string") {
      const result = JSON.parse(cfAccessResultStr);
      return {
        ...result,
        token: jwt
      };
    }
    const claims = verifyResult.payload;
    try {
      let cfIdentity;
      if (serviceToken) {
        cfIdentity = {
          id: subject,
          name: "Bot",
          email: serviceToken.subject,
          groups: []
        };
      } else {
        cfIdentity = await this.getIdentityProfile(jwt);
      }
      const cfAccessResult = {
        claims,
        cfIdentity,
        expiresInSeconds: claims.exp - claims.iat
      };
      (_b = this.cache) == null ? void 0 : _b.set(cacheKey, JSON.stringify(cfAccessResult));
      return {
        ...cfAccessResult,
        token: jwt
      };
    } catch (err) {
      throw new errors.ForwardedError(
        "Failed to populate access identity information",
        err
      );
    }
  }
  async getIdentityProfile(jwt) {
    const headers = new Headers();
    headers.set(CF_JWT_HEADER, jwt);
    headers.set("cookie", `${COOKIE_AUTH_NAME}=${jwt}`);
    try {
      const res = await fetch(
        `https://${this.teamName}.cloudflareaccess.com/cdn-cgi/access/get-identity`,
        { headers }
      );
      if (!res.ok) {
        throw await errors.ResponseError.fromResponse(res);
      }
      const cfIdentity = await res.json();
      return cfIdentity;
    } catch (err) {
      throw new errors.ForwardedError("getIdentityProfile failed", err);
    }
  }
}

function createCloudflareAccessAuthenticator(options) {
  return pluginAuthNode.createProxyAuthenticator({
    async defaultProfileTransform(result) {
      return {
        profile: {
          email: result.claims.email,
          displayName: result.cfIdentity.name
        }
      };
    },
    initialize({ config }) {
      return {
        helper: AuthHelper.fromConfig(config, { cache: options == null ? void 0 : options.cache })
      };
    },
    async authenticate({ req }, { helper }) {
      const result = await helper.authenticate(req);
      return {
        result,
        providerInfo: result
      };
    }
  });
}

exports.cloudflareAccessSignInResolvers = void 0;
((cloudflareAccessSignInResolvers2) => {
  cloudflareAccessSignInResolvers2.emailMatchingUserEntityProfileEmail = pluginAuthNode.createSignInResolverFactory({
    create() {
      return async (info, ctx) => {
        const { profile } = info;
        if (!profile.email) {
          throw new Error(
            "Login failed, user profile does not contain an email"
          );
        }
        return ctx.signInWithCatalogUser({
          filter: {
            "spec.profile.email": profile.email
          }
        });
      };
    }
  });
})(exports.cloudflareAccessSignInResolvers || (exports.cloudflareAccessSignInResolvers = {}));

const authModuleCloudflareAccessProvider = backendPluginApi.createBackendModule({
  pluginId: "auth",
  moduleId: "cloudflare-access-provider",
  register(reg) {
    reg.registerInit({
      deps: {
        authProviders: pluginAuthNode.authProvidersExtensionPoint,
        cache: backendPluginApi.coreServices.cache
      },
      async init({ authProviders, cache }) {
        authProviders.registerProvider({
          providerId: "cfaccess",
          factory: pluginAuthNode.createProxyAuthProviderFactory({
            authenticator: createCloudflareAccessAuthenticator({ cache }),
            signInResolverFactories: {
              ...exports.cloudflareAccessSignInResolvers,
              ...pluginAuthNode.commonSignInResolvers
            }
          })
        });
      }
    });
  }
});

exports.createCloudflareAccessAuthenticator = createCloudflareAccessAuthenticator;
exports.default = authModuleCloudflareAccessProvider;
//# sourceMappingURL=index.cjs.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendPluginApi = require('@backstage/backend-plugin-api');
var alpha = require('@backstage/plugin-permission-node/alpha');
var router = require('./cjs/router-CjGokdX5.cjs.js');
require('zod');
require('express');
require('express-promise-router');
require('@backstage/backend-common');
require('@backstage/errors');
require('@backstage/plugin-permission-common');
require('node-fetch');
require('lodash');
require('dataloader');

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class PolicyExtensionPointImpl {
  constructor() {
    __publicField(this, "policy");
  }
  setPolicy(policy) {
    if (this.policy) {
      throw new Error("Policy already set");
    }
    this.policy = policy;
  }
}
const permissionPlugin = backendPluginApi.createBackendPlugin({
  pluginId: "permission",
  register(env) {
    const policies = new PolicyExtensionPointImpl();
    env.registerExtensionPoint(alpha.policyExtensionPoint, policies);
    env.registerInit({
      deps: {
        http: backendPluginApi.coreServices.httpRouter,
        config: backendPluginApi.coreServices.rootConfig,
        logger: backendPluginApi.coreServices.logger,
        discovery: backendPluginApi.coreServices.discovery,
        auth: backendPluginApi.coreServices.auth,
        httpAuth: backendPluginApi.coreServices.httpAuth,
        userInfo: backendPluginApi.coreServices.userInfo
      },
      async init({
        http,
        config,
        logger,
        discovery,
        auth,
        httpAuth,
        userInfo
      }) {
        if (!policies.policy) {
          throw new Error(
            "No policy module installed! Please install a policy module. If you want to allow all requests, use @backstage/plugin-permission-backend-module-allow-all-policy permissionModuleAllowAllPolicy"
          );
        }
        http.use(
          await router.createRouter({
            config,
            discovery,
            logger,
            policy: policies.policy,
            auth,
            httpAuth,
            userInfo
          })
        );
        http.addAuthPolicy({
          path: "/health",
          allow: "unauthenticated"
        });
      }
    });
  }
});

exports.default = permissionPlugin;
//# sourceMappingURL=alpha.cjs.js.map

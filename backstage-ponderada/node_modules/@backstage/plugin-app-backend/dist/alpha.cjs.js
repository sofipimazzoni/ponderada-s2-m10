'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendPluginApi = require('@backstage/backend-plugin-api');
var router = require('./cjs/router-B9fabz1o.cjs.js');
var pluginAppNode = require('@backstage/plugin-app-node');
require('@backstage/backend-common');
require('helmet');
require('express');
require('express-promise-router');
require('fs-extra');
require('path');
require('@backstage/config-loader');
require('luxon');
require('lodash/partition');
require('globby');
require('@backstage/errors');

const appPlugin = backendPluginApi.createBackendPlugin({
  pluginId: "app",
  register(env) {
    let staticFallbackHandler;
    let schema;
    env.registerExtensionPoint(pluginAppNode.staticFallbackHandlerExtensionPoint, {
      setStaticFallbackHandler(handler) {
        if (staticFallbackHandler) {
          throw new Error(
            "Attempted to install a static fallback handler for the app-backend twice"
          );
        }
        staticFallbackHandler = handler;
      }
    });
    env.registerExtensionPoint(pluginAppNode.configSchemaExtensionPoint, {
      setConfigSchema(configSchema) {
        if (schema) {
          throw new Error(
            "Attempted to set config schema for the app-backend twice"
          );
        }
        schema = configSchema;
      }
    });
    env.registerInit({
      deps: {
        logger: backendPluginApi.coreServices.logger,
        config: backendPluginApi.coreServices.rootConfig,
        database: backendPluginApi.coreServices.database,
        httpRouter: backendPluginApi.coreServices.httpRouter,
        auth: backendPluginApi.coreServices.auth,
        httpAuth: backendPluginApi.coreServices.httpAuth
      },
      async init({ logger, config, database, httpRouter, auth, httpAuth }) {
        var _a;
        const appPackageName = (_a = config.getOptionalString("app.packageName")) != null ? _a : "app";
        const router$1 = await router.createRouter({
          logger,
          config,
          database,
          auth,
          httpAuth,
          appPackageName,
          staticFallbackHandler,
          schema
        });
        httpRouter.use(router$1);
        httpRouter.addAuthPolicy({
          allow: "unauthenticated",
          path: "/"
        });
      }
    });
  }
});

exports.default = appPlugin;
//# sourceMappingURL=alpha.cjs.js.map

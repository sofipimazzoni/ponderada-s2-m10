'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendPluginApi = require('@backstage/backend-plugin-api');
var pluginAuthNode = require('@backstage/plugin-auth-node');
var catalogModel = require('@backstage/catalog-model');
var errors = require('@backstage/errors');

const guestAuthenticator = pluginAuthNode.createProxyAuthenticator({
  defaultProfileTransform: async () => {
    return { profile: {} };
  },
  initialize() {
  },
  async authenticate() {
    return { result: {} };
  }
});

const signInAsGuestUser = (config) => async (_, ctx) => {
  var _a, _b;
  if (process.env.NODE_ENV !== "development" && config.getOptionalBoolean("dangerouslyAllowOutsideDevelopment") !== true) {
    throw new errors.NotImplementedError(
      "The guest provider is NOT recommended for use outside of a development environment. If you want to enable this, set `auth.providers.guest.dangerouslyAllowOutsideDevelopment: true` in your app config."
    );
  }
  const userRef = (_a = config.getOptionalString("userEntityRef")) != null ? _a : catalogModel.stringifyEntityRef({
    kind: "user",
    namespace: "development",
    name: "guest"
  });
  const ownershipRefs = (_b = config.getOptionalStringArray(
    "ownershipEntityRefs"
  )) != null ? _b : [userRef];
  try {
    return await ctx.signInWithCatalogUser({ entityRef: userRef });
  } catch (err) {
    return ctx.issueToken({
      claims: {
        sub: userRef,
        ent: ownershipRefs
      }
    });
  }
};

const authModuleGuestProvider = backendPluginApi.createBackendModule({
  pluginId: "auth",
  moduleId: "guest-provider",
  register(reg) {
    reg.registerInit({
      deps: {
        logger: backendPluginApi.coreServices.logger,
        providers: pluginAuthNode.authProvidersExtensionPoint,
        config: backendPluginApi.coreServices.rootConfig
      },
      async init({ providers, logger, config }) {
        if (process.env.NODE_ENV !== "development") {
          logger.warn(
            "You should NOT be using the guest provider outside of a development environment."
          );
        }
        providers.registerProvider({
          providerId: "guest",
          factory: pluginAuthNode.createProxyAuthProviderFactory({
            authenticator: guestAuthenticator,
            signInResolver: signInAsGuestUser(
              config.getConfig("auth.providers.guest")
            )
          })
        });
      }
    });
  }
});

exports.default = authModuleGuestProvider;
//# sourceMappingURL=index.cjs.js.map

import { S as ScaffolderClient, r as rootRouteRef$1, s as selectedTemplateRouteRef, a as scaffolderTaskRouteRef, b as actionsRouteRef, c as scaffolderListTaskRouteRef, e as editRouteRef, d as registerComponentRouteRef, v as viewTechDocRouteRef } from './esm/routes-BvToNy4N.esm.js';
import { scmIntegrationsApiRef } from '@backstage/integration-react';
import { scaffolderApiRef as scaffolderApiRef$1, createScaffolderFieldExtension as createScaffolderFieldExtension$1, ScaffolderFieldExtensions as ScaffolderFieldExtensions$1, useTemplateSecrets as useTemplateSecrets$1, createScaffolderLayout as createScaffolderLayout$1, ScaffolderLayouts as ScaffolderLayouts$1 } from '@backstage/plugin-scaffolder-react';
import { E as EntityPicker, a as EntityPickerSchema, b as EntityNamePicker, e as entityNamePickerValidation, c as EntityNamePickerSchema, M as MultiEntityPicker, d as MultiEntityPickerSchema, v as validateMultiEntityPickerValidation, R as RepoUrlPicker, r as repoPickerValidation, f as RepoUrlPickerSchema, O as OwnerPicker, g as OwnerPickerSchema, h as MyGroupsPicker, i as MyGroupsPickerSchema, j as OwnedEntityPicker, k as OwnedEntityPickerSchema, l as EntityTagsPicker, m as EntityTagsPickerSchema } from './esm/OngoingTask-ClfJCJcE.esm.js';
export { p as EntityPickerFieldSchema, u as EntityTagsPickerFieldSchema, w as MyGroupsPickerFieldSchema, t as OwnedEntityPickerFieldSchema, q as OwnerPickerFieldSchema, s as RepoUrlPickerFieldSchema, n as TaskPage, o as makeFieldSchemaFromZod } from './esm/OngoingTask-ClfJCJcE.esm.js';
import { createPlugin, createApiFactory, discoveryApiRef, fetchApiRef, identityApiRef, createRoutableExtension, useApi, alertApiRef } from '@backstage/core-plugin-api';
import React from 'react';
import capitalize from 'lodash/capitalize';
import { Progress } from '@backstage/core-components';
import Box from '@material-ui/core/Box';
import Checkbox from '@material-ui/core/Checkbox';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import TextField from '@material-ui/core/TextField';
import Typography from '@material-ui/core/Typography';
import CheckBoxIcon from '@material-ui/icons/CheckBox';
import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import Autocomplete from '@material-ui/lab/Autocomplete';
import { useEntityTypeFilter } from '@backstage/plugin-catalog-react';
import '@backstage/catalog-model';
import '@backstage/errors';
import 'qs';
import 'zen-observable';
import 'event-source-polyfill';
import 'zod';
import '@backstage/catalog-client';
import '@material-ui/core/FormControl';
import 'react-use/esm/useAsync';
import '@material-ui/core/FormHelperText';
import '@material-ui/core/Input';
import '@material-ui/core/InputLabel';
import 'react-use/esm/useDebounce';
import '@material-ui/core/Divider';
import 'react-use/esm/useEffectOnce';
import 'zod-to-json-schema';
import 'react-router-dom';
import '@material-ui/core/Button';
import '@material-ui/core/Paper';
import '@material-ui/core/styles';
import '@material-ui/core/IconButton';
import '@material-ui/core/ListItemIcon';
import '@material-ui/core/ListItemText';
import '@material-ui/core/MenuItem';
import '@material-ui/core/MenuList';
import '@material-ui/core/Popover';
import '@react-hookz/web';
import '@material-ui/icons/Cancel';
import '@material-ui/icons/Repeat';
import '@material-ui/icons/Toc';
import '@material-ui/icons/ControlPoint';
import '@material-ui/icons/MoreVert';
import '@backstage/plugin-scaffolder-react/alpha';

const scaffolderPlugin = createPlugin({
  id: "scaffolder",
  apis: [
    createApiFactory({
      api: scaffolderApiRef$1,
      deps: {
        discoveryApi: discoveryApiRef,
        scmIntegrationsApi: scmIntegrationsApiRef,
        fetchApi: fetchApiRef,
        identityApi: identityApiRef
      },
      factory: ({ discoveryApi, scmIntegrationsApi, fetchApi, identityApi }) => new ScaffolderClient({
        discoveryApi,
        scmIntegrationsApi,
        fetchApi,
        identityApi
      })
    })
  ],
  routes: {
    root: rootRouteRef$1,
    selectedTemplate: selectedTemplateRouteRef,
    ongoingTask: scaffolderTaskRouteRef,
    actions: actionsRouteRef,
    listTasks: scaffolderListTaskRouteRef,
    edit: editRouteRef
  },
  externalRoutes: {
    registerComponent: registerComponentRouteRef,
    viewTechDoc: viewTechDocRouteRef
  }
});
const EntityPickerFieldExtension = scaffolderPlugin.provide(
  createScaffolderFieldExtension$1({
    component: EntityPicker,
    name: "EntityPicker",
    schema: EntityPickerSchema
  })
);
const EntityNamePickerFieldExtension = scaffolderPlugin.provide(
  createScaffolderFieldExtension$1({
    component: EntityNamePicker,
    name: "EntityNamePicker",
    validation: entityNamePickerValidation,
    schema: EntityNamePickerSchema
  })
);
const MultiEntityPickerFieldExtension = scaffolderPlugin.provide(
  createScaffolderFieldExtension$1({
    component: MultiEntityPicker,
    name: "MultiEntityPicker",
    schema: MultiEntityPickerSchema,
    validation: validateMultiEntityPickerValidation
  })
);
const RepoUrlPickerFieldExtension = scaffolderPlugin.provide(
  createScaffolderFieldExtension$1({
    component: RepoUrlPicker,
    name: "RepoUrlPicker",
    validation: repoPickerValidation,
    schema: RepoUrlPickerSchema
  })
);
const OwnerPickerFieldExtension = scaffolderPlugin.provide(
  createScaffolderFieldExtension$1({
    component: OwnerPicker,
    name: "OwnerPicker",
    schema: OwnerPickerSchema
  })
);
const MyGroupsPickerFieldExtension = scaffolderPlugin.provide(
  createScaffolderFieldExtension$1({
    component: MyGroupsPicker,
    name: "MyGroupsPicker",
    schema: MyGroupsPickerSchema
  })
);
const ScaffolderPage = scaffolderPlugin.provide(
  createRoutableExtension({
    name: "ScaffolderPage",
    component: () => import('./esm/index-UcPid-q1.esm.js').then((m) => m.Router),
    mountPoint: rootRouteRef$1
  })
);
const OwnedEntityPickerFieldExtension = scaffolderPlugin.provide(
  createScaffolderFieldExtension$1({
    component: OwnedEntityPicker,
    name: "OwnedEntityPicker",
    schema: OwnedEntityPickerSchema
  })
);
const EntityTagsPickerFieldExtension = scaffolderPlugin.provide(
  createScaffolderFieldExtension$1({
    component: EntityTagsPicker,
    name: "EntityTagsPicker",
    schema: EntityTagsPickerSchema
  })
);

const icon = /* @__PURE__ */ React.createElement(CheckBoxOutlineBlankIcon, { fontSize: "small" });
const checkedIcon = /* @__PURE__ */ React.createElement(CheckBoxIcon, { fontSize: "small" });
const TemplateTypePicker = () => {
  const alertApi = useApi(alertApiRef);
  const { error, loading, availableTypes, selectedTypes, setSelectedTypes } = useEntityTypeFilter();
  if (loading)
    return /* @__PURE__ */ React.createElement(Progress, null);
  if (!availableTypes)
    return null;
  if (error) {
    alertApi.post({
      message: `Failed to load entity types`,
      severity: "error"
    });
    return null;
  }
  return /* @__PURE__ */ React.createElement(Box, { pb: 1, pt: 1 }, /* @__PURE__ */ React.createElement(
    Typography,
    {
      variant: "button",
      component: "label",
      htmlFor: "categories-picker"
    },
    "Categories"
  ), /* @__PURE__ */ React.createElement(
    Autocomplete,
    {
      id: "categories-picker",
      multiple: true,
      options: availableTypes,
      value: selectedTypes,
      onChange: (_, value) => setSelectedTypes(value),
      renderOption: (option, { selected }) => /* @__PURE__ */ React.createElement(
        FormControlLabel,
        {
          control: /* @__PURE__ */ React.createElement(
            Checkbox,
            {
              icon,
              checkedIcon,
              checked: selected
            }
          ),
          label: capitalize(option)
        }
      ),
      size: "small",
      popupIcon: /* @__PURE__ */ React.createElement(ExpandMoreIcon, { "data-testid": "categories-picker-expand" }),
      renderInput: (params) => /* @__PURE__ */ React.createElement(TextField, { ...params, variant: "outlined" })
    }
  ));
};

const rootRouteRef = rootRouteRef$1;
const createScaffolderFieldExtension = createScaffolderFieldExtension$1;
const ScaffolderFieldExtensions = ScaffolderFieldExtensions$1;
const useTemplateSecrets = useTemplateSecrets$1;
const scaffolderApiRef = scaffolderApiRef$1;
const createScaffolderLayout = createScaffolderLayout$1;
const ScaffolderLayouts = ScaffolderLayouts$1;

export { EntityNamePickerFieldExtension, EntityPickerFieldExtension, EntityTagsPickerFieldExtension, MultiEntityPickerFieldExtension, MyGroupsPickerFieldExtension, MyGroupsPickerSchema, OwnedEntityPickerFieldExtension, OwnerPickerFieldExtension, RepoUrlPickerFieldExtension, ScaffolderClient, ScaffolderFieldExtensions, ScaffolderLayouts, ScaffolderPage, TemplateTypePicker, createScaffolderFieldExtension, createScaffolderLayout, repoPickerValidation, rootRouteRef, scaffolderApiRef, scaffolderPlugin, useTemplateSecrets };
//# sourceMappingURL=index.esm.js.map

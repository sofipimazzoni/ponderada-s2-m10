import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import * as _backstage_frontend_plugin_api from '@backstage/frontend-plugin-api';
import React__default from 'react';
import { TemplateEntityV1beta3 } from '@backstage/plugin-scaffolder-common';
import { TemplateGroupFilter, FieldExtensionOptions, ReviewStepProps, LayoutOptions, FormProps as FormProps$1 } from '@backstage/plugin-scaffolder-react';
import { FormProps as FormProps$2 } from '@rjsf/core';

/**
 * @alpha
 */
type TemplateListPageProps = {
    TemplateCardComponent?: React__default.ComponentType<{
        template: TemplateEntityV1beta3;
    }>;
    groups?: TemplateGroupFilter[];
    templateFilter?: (entity: TemplateEntityV1beta3) => boolean;
    contextMenu?: {
        editor?: boolean;
        actions?: boolean;
        tasks?: boolean;
    };
    headerOptions?: {
        pageTitleOverride?: string;
        title?: string;
        subtitle?: string;
    };
};

/**
 * @alpha
 */
type TemplateWizardPageProps = {
    customFieldExtensions: FieldExtensionOptions<any, any>[];
    components?: {
        ReviewStepComponent?: React__default.ComponentType<ReviewStepProps>;
    };
    layouts?: LayoutOptions[];
    formProps?: FormProps$1;
    headerOptions?: {
        pageTitleOverride?: string;
        title?: string;
        subtitle?: string;
    };
};

/**
 * These types will be replaced eventually by the one in the scaffolder-react plugin.
 * It is a temporary solution to avoid the `/alpha` types being re-exported and that not being supported right now.
 * It exists already in the `scaffolder-react` plugin, so you may have to update both files.
 */

/**
 * Any `@rjsf/core` form properties that are publicly exposed to the `NextScaffolderPage`
 *
 * @alpha
 * @deprecated use the import from {@link @backstage/plugin-scaffolder-react/alpha#FormProps} instead
 */
type FormProps = Pick<FormProps$2, 'transformErrors' | 'noHtml5Validate'>;

/** @alpha */
declare const _default: _backstage_frontend_plugin_api.BackstagePlugin<{
    root: _backstage_frontend_plugin_api.RouteRef<undefined>;
    selectedTemplate: _backstage_frontend_plugin_api.SubRouteRef<_backstage_core_plugin_api.PathParams<"/templates/:namespace/:templateName">>;
    ongoingTask: _backstage_frontend_plugin_api.SubRouteRef<_backstage_core_plugin_api.PathParams<"/tasks/:taskId">>;
    actions: _backstage_frontend_plugin_api.SubRouteRef<undefined>;
    listTasks: _backstage_frontend_plugin_api.SubRouteRef<undefined>;
    edit: _backstage_frontend_plugin_api.SubRouteRef<undefined>;
}, {
    registerComponent: _backstage_frontend_plugin_api.ExternalRouteRef<undefined, true>;
    viewTechDoc: _backstage_frontend_plugin_api.ExternalRouteRef<{
        name: string;
        kind: string;
        namespace: string;
    }, true>;
}>;

export { type FormProps, type TemplateListPageProps, type TemplateWizardPageProps, _default as default };

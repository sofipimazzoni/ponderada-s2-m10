{"version":3,"file":"alpha.cjs.js","sources":["../src/plugin.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  cacheToPluginCacheManager,\n  DockerContainerRunner,\n  loggerToWinstonLogger,\n} from '@backstage/backend-common';\nimport {\n  coreServices,\n  createBackendPlugin,\n} from '@backstage/backend-plugin-api';\n\nimport {\n  DocsBuildStrategy,\n  Generators,\n  PreparerBase,\n  Preparers,\n  Publisher,\n  RemoteProtocol,\n  techdocsBuildsExtensionPoint,\n  TechdocsGenerator,\n  techdocsGeneratorExtensionPoint,\n  techdocsPreparerExtensionPoint,\n} from '@backstage/plugin-techdocs-node';\nimport Docker from 'dockerode';\nimport { createRouter } from '@backstage/plugin-techdocs-backend';\n\n/**\n * The TechDocs plugin is responsible for serving and building documentation for any entity.\n * @alpha\n */\nexport const techdocsPlugin = createBackendPlugin({\n  pluginId: 'techdocs',\n  register(env) {\n    let docsBuildStrategy: DocsBuildStrategy | undefined;\n    env.registerExtensionPoint(techdocsBuildsExtensionPoint, {\n      setBuildStrategy(buildStrategy: DocsBuildStrategy) {\n        if (docsBuildStrategy) {\n          throw new Error('DocsBuildStrategy may only be set once');\n        }\n        docsBuildStrategy = buildStrategy;\n      },\n    });\n\n    let customTechdocsGenerator: TechdocsGenerator | undefined;\n    env.registerExtensionPoint(techdocsGeneratorExtensionPoint, {\n      setTechdocsGenerator(generator: TechdocsGenerator) {\n        if (customTechdocsGenerator) {\n          throw new Error('TechdocsGenerator may only be set once');\n        }\n\n        customTechdocsGenerator = generator;\n      },\n    });\n\n    const customPreparers = new Map<RemoteProtocol, PreparerBase>();\n    env.registerExtensionPoint(techdocsPreparerExtensionPoint, {\n      registerPreparer(protocol: RemoteProtocol, preparer: PreparerBase) {\n        if (customPreparers.has(protocol)) {\n          throw new Error(\n            `Preparer for protocol ${protocol} is already registered`,\n          );\n        }\n        customPreparers.set(protocol, preparer);\n      },\n    });\n\n    env.registerInit({\n      deps: {\n        config: coreServices.rootConfig,\n        logger: coreServices.logger,\n        urlReader: coreServices.urlReader,\n        http: coreServices.httpRouter,\n        discovery: coreServices.discovery,\n        cache: coreServices.cache,\n        httpAuth: coreServices.httpAuth,\n        auth: coreServices.auth,\n      },\n      async init({\n        config,\n        logger,\n        urlReader,\n        http,\n        discovery,\n        cache,\n        httpAuth,\n        auth,\n      }) {\n        const winstonLogger = loggerToWinstonLogger(logger);\n        // Preparers are responsible for fetching source files for documentation.\n        const preparers = await Preparers.fromConfig(config, {\n          reader: urlReader,\n          logger: winstonLogger,\n        });\n        for (const [protocol, preparer] of customPreparers.entries()) {\n          preparers.register(protocol, preparer);\n        }\n\n        // Docker client (conditionally) used by the generators, based on techdocs.generators config.\n        const dockerClient = new Docker();\n        const containerRunner = new DockerContainerRunner({ dockerClient });\n\n        // Generators are used for generating documentation sites.\n        const generators = await Generators.fromConfig(config, {\n          logger: winstonLogger,\n          containerRunner,\n          customGenerator: customTechdocsGenerator,\n        });\n\n        // Publisher is used for\n        // 1. Publishing generated files to storage\n        // 2. Fetching files from storage and passing them to TechDocs frontend.\n        const publisher = await Publisher.fromConfig(config, {\n          logger: winstonLogger,\n          discovery: discovery,\n        });\n\n        // checks if the publisher is working and logs the result\n        await publisher.getReadiness();\n\n        const cacheManager = cacheToPluginCacheManager(cache);\n        http.use(\n          await createRouter({\n            logger: winstonLogger,\n            cache: cacheManager,\n            docsBuildStrategy,\n            preparers,\n            generators,\n            publisher,\n            config,\n            discovery,\n            httpAuth,\n            auth,\n          }),\n        );\n\n        http.addAuthPolicy({\n          path: '/static',\n          allow: 'user-cookie',\n        });\n      },\n    });\n  },\n});\n"],"names":["createBackendPlugin","techdocsBuildsExtensionPoint","techdocsGeneratorExtensionPoint","techdocsPreparerExtensionPoint","coreServices","loggerToWinstonLogger","Preparers","Docker","DockerContainerRunner","Generators","Publisher","cacheToPluginCacheManager","createRouter"],"mappings":"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"}
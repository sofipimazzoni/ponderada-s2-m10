{"version":3,"file":"index.cjs.js","sources":["../src/actions/bitbucketServer.examples.ts","../src/actions/bitbucketServer.ts","../src/actions/bitbucketServerPullRequest.ts","../src/module.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TemplateExample } from '@backstage/plugin-scaffolder-node';\nimport yaml from 'yaml';\n\nexport const examples: TemplateExample[] = [\n  {\n    description: 'Initialize git repository with required properties',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'publish:bitbucketServer',\n          id: 'publish-bitbucket-server-minimal',\n          name: 'Publish To Bitbucket Server',\n          input: {\n            repoUrl: 'hosted.bitbucket.com?project=project&repo=repo',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Initialize git repository with all properties',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'publish:bitbucketServer',\n          id: 'publish-bitbucket-server-minimal',\n          name: 'Publish To Bitbucket Server',\n          input: {\n            repoUrl: 'hosted.bitbucket.com?project=project&repo=repo',\n            description: 'This is a test repository',\n            repoVisibility: 'private',\n            defaultBranch: 'main',\n            sourcePath: 'packages/backend',\n            enableLFS: false,\n            token: 'test-token',\n            gitCommitMessage: 'Init check commit',\n            gitAuthorName: 'Test User',\n            gitAuthorEmail: 'test.user@example.com',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Initialize git repository with public visibility',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'publish:bitbucketServer',\n          id: 'publish-bitbucket-server-minimal',\n          name: 'Publish To Bitbucket Server',\n          input: {\n            repoUrl: 'hosted.bitbucket.com?project=project&repo=repo',\n            description: 'This is a test repository',\n            repoVisibility: 'public',\n            defaultBranch: 'main',\n            sourcePath: 'packages/backend',\n            enableLFS: true,\n            token: 'test-token',\n            gitCommitMessage: 'Init check commit',\n            gitAuthorName: 'Test User',\n            gitAuthorEmail: 'test.user@example.com',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Initialize git repository with different default branch',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'publish:bitbucketServer',\n          id: 'publish-bitbucket-server-minimal',\n          name: 'Publish To Bitbucket Server',\n          input: {\n            repoUrl: 'hosted.bitbucket.com?project=project&repo=repo',\n            description: 'This is a test repository',\n            repoVisibility: 'public',\n            defaultBranch: 'develop',\n            sourcePath: 'packages/backend',\n            enableLFS: true,\n            token: 'test-token',\n            gitCommitMessage: 'Init check commit',\n            gitAuthorName: 'Test User',\n            gitAuthorEmail: 'test.user@example.com',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Initialize git repository with different source path',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'publish:bitbucketServer',\n          id: 'publish-bitbucket-server-minimal',\n          name: 'Publish To Bitbucket Server',\n          input: {\n            repoUrl: 'hosted.bitbucket.com?project=project&repo=repo',\n            description: 'This is a test repository',\n            repoVisibility: 'public',\n            defaultBranch: 'develop',\n            sourcePath: 'packages/api',\n            enableLFS: true,\n            token: 'test-token',\n            gitCommitMessage: 'Init check commit',\n            gitAuthorName: 'Test User',\n            gitAuthorEmail: 'test.user@example.com',\n          },\n        },\n      ],\n    }),\n  },\n];\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  getBitbucketServerRequestOptions,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  createTemplateAction,\n  initRepoAndPush,\n  getRepoSourceDirectory,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport fetch, { Response, RequestInit } from 'node-fetch';\n\nimport { Config } from '@backstage/config';\nimport { examples } from './bitbucketServer.examples';\n\nconst createRepository = async (opts: {\n  project: string;\n  repo: string;\n  description?: string;\n  repoVisibility: 'private' | 'public';\n  defaultBranch: string;\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const {\n    project,\n    repo,\n    description,\n    authorization,\n    repoVisibility,\n    defaultBranch,\n    apiBaseUrl,\n  } = opts;\n\n  let response: Response;\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      name: repo,\n      description: description,\n      defaultBranch: defaultBranch,\n      public: repoVisibility === 'public',\n    }),\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(`${apiBaseUrl}/projects/${project}/repos`, options);\n  } catch (e) {\n    throw new Error(`Unable to create repository, ${e}`);\n  }\n\n  if (response.status !== 201) {\n    throw new Error(\n      `Unable to create repository, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  const r = await response.json();\n  let remoteUrl = '';\n  for (const link of r.links.clone) {\n    if (link.name === 'http') {\n      remoteUrl = link.href;\n    }\n  }\n\n  const repoContentsUrl = `${r.links.self[0].href}`;\n  return { remoteUrl, repoContentsUrl };\n};\n\nconst performEnableLFS = async (opts: {\n  authorization: string;\n  host: string;\n  project: string;\n  repo: string;\n}) => {\n  const { authorization, host, project, repo } = opts;\n\n  const options: RequestInit = {\n    method: 'PUT',\n    headers: {\n      Authorization: authorization,\n    },\n  };\n\n  const { ok, status, statusText } = await fetch(\n    `https://${host}/rest/git-lfs/admin/projects/${project}/repos/${repo}/enabled`,\n    options,\n  );\n\n  if (!ok)\n    throw new Error(\n      `Failed to enable LFS in the repository, ${status}: ${statusText}`,\n    );\n};\n\n/**\n * Creates a new action that initializes a git repository of the content in the workspace\n * and publishes it to Bitbucket Server.\n * @public\n */\nexport function createPublishBitbucketServerAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    description?: string;\n    defaultBranch?: string;\n    repoVisibility?: 'private' | 'public';\n    sourcePath?: string;\n    enableLFS?: boolean;\n    token?: string;\n    gitCommitMessage?: string;\n    gitAuthorName?: string;\n    gitAuthorEmail?: string;\n  }>({\n    id: 'publish:bitbucketServer',\n    description:\n      'Initializes a git repository of the content in the workspace, and publishes it to Bitbucket Server.',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            type: 'string',\n          },\n          description: {\n            title: 'Repository Description',\n            type: 'string',\n          },\n          repoVisibility: {\n            title: 'Repository Visibility',\n            type: 'string',\n            enum: ['private', 'public'],\n          },\n          defaultBranch: {\n            title: 'Default Branch',\n            type: 'string',\n            description: `Sets the default branch on the repository. The default value is 'master'`,\n          },\n          sourcePath: {\n            title: 'Source Path',\n            description:\n              'Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.',\n            type: 'string',\n          },\n          enableLFS: {\n            title: 'Enable LFS?',\n            description: 'Enable LFS for the repository.',\n            type: 'boolean',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description:\n              'The token to use for authorization to BitBucket Server',\n          },\n          gitCommitMessage: {\n            title: 'Git Commit Message',\n            type: 'string',\n            description: `Sets the commit message on the repository. The default value is 'initial commit'`,\n          },\n          gitAuthorName: {\n            title: 'Author Name',\n            type: 'string',\n            description: `Sets the author name for the commit. The default value is 'Scaffolder'`,\n          },\n          gitAuthorEmail: {\n            title: 'Author Email',\n            type: 'string',\n            description: `Sets the author email for the commit.`,\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          remoteUrl: {\n            title: 'A URL to the repository with the provider',\n            type: 'string',\n          },\n          repoContentsUrl: {\n            title: 'A URL to the root of the repository',\n            type: 'string',\n          },\n          commitHash: {\n            title: 'The git commit hash of the initial commit',\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        description,\n        defaultBranch = 'master',\n        repoVisibility = 'private',\n        enableLFS = false,\n        gitCommitMessage = 'initial commit',\n        gitAuthorName,\n        gitAuthorEmail,\n      } = ctx.input;\n\n      const { project, repo, host } = parseRepoUrl(repoUrl, integrations);\n\n      if (!project) {\n        throw new InputError(\n          `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing project`,\n        );\n      }\n\n      const integrationConfig = integrations.bitbucketServer.byHost(host);\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      const token = ctx.input.token ?? integrationConfig.config.token;\n\n      const authConfig = {\n        ...integrationConfig.config,\n        ...{ token },\n      };\n      const reqOpts = getBitbucketServerRequestOptions(authConfig);\n      const authorization = reqOpts.headers.Authorization;\n      if (!authorization) {\n        throw new Error(\n          `Authorization has not been provided for ${integrationConfig.config.host}. Please add either (a) a user login auth token, or (b) a token or (c) username + password to the integration config.`,\n        );\n      }\n\n      const apiBaseUrl = integrationConfig.config.apiBaseUrl;\n\n      const { remoteUrl, repoContentsUrl } = await createRepository({\n        authorization,\n        project,\n        repo,\n        repoVisibility,\n        defaultBranch,\n        description,\n        apiBaseUrl,\n      });\n\n      const gitAuthorInfo = {\n        name: gitAuthorName\n          ? gitAuthorName\n          : config.getOptionalString('scaffolder.defaultAuthor.name'),\n        email: gitAuthorEmail\n          ? gitAuthorEmail\n          : config.getOptionalString('scaffolder.defaultAuthor.email'),\n      };\n\n      const auth = authConfig.token\n        ? {\n            token: token!,\n          }\n        : {\n            username: authConfig.username!,\n            password: authConfig.password!,\n          };\n\n      const commitResult = await initRepoAndPush({\n        dir: getRepoSourceDirectory(ctx.workspacePath, ctx.input.sourcePath),\n        remoteUrl,\n        auth,\n        defaultBranch,\n        logger: ctx.logger,\n        commitMessage: gitCommitMessage\n          ? gitCommitMessage\n          : config.getOptionalString('scaffolder.defaultCommitMessage'),\n        gitAuthorInfo,\n      });\n\n      if (enableLFS) {\n        await performEnableLFS({ authorization, host, project, repo });\n      }\n\n      ctx.output('commitHash', commitResult?.commitHash);\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n    },\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  getBitbucketServerRequestOptions,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  createTemplateAction,\n  getRepoSourceDirectory,\n  commitAndPushBranch,\n  addFiles,\n  createBranch as createGitBranch,\n  cloneRepo,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport fetch, { RequestInit, Response } from 'node-fetch';\nimport { Config } from '@backstage/config';\nimport fs from 'fs-extra';\n\nconst createPullRequest = async (opts: {\n  project: string;\n  repo: string;\n  title: string;\n  description?: string;\n  toRef: {\n    id: string;\n    displayId: string;\n    type: string;\n    latestCommit: string;\n    latestChangeset: string;\n    isDefault: boolean;\n  };\n  fromRef: {\n    id: string;\n    displayId: string;\n    type: string;\n    latestCommit: string;\n    latestChangeset: string;\n    isDefault: boolean;\n  };\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const {\n    project,\n    repo,\n    title,\n    description,\n    toRef,\n    fromRef,\n    authorization,\n    apiBaseUrl,\n  } = opts;\n\n  let response: Response;\n  const data: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      title: title,\n      description: description,\n      state: 'OPEN',\n      open: true,\n      closed: false,\n      locked: true,\n      toRef: toRef,\n      fromRef: fromRef,\n    }),\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/projects/${encodeURIComponent(\n        project,\n      )}/repos/${encodeURIComponent(repo)}/pull-requests`,\n      data,\n    );\n  } catch (e) {\n    throw new Error(`Unable to create pull-reqeusts, ${e}`);\n  }\n\n  if (response.status !== 201) {\n    throw new Error(\n      `Unable to create pull requests, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  const r = await response.json();\n  return `${r.links.self[0].href}`;\n};\nconst findBranches = async (opts: {\n  project: string;\n  repo: string;\n  branchName: string;\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const { project, repo, branchName, authorization, apiBaseUrl } = opts;\n\n  let response: Response;\n  const options: RequestInit = {\n    method: 'GET',\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/projects/${encodeURIComponent(\n        project,\n      )}/repos/${encodeURIComponent(\n        repo,\n      )}/branches?boostMatches=true&filterText=${encodeURIComponent(\n        branchName,\n      )}`,\n      options,\n    );\n  } catch (e) {\n    throw new Error(`Unable to get branches, ${e}`);\n  }\n\n  if (response.status !== 200) {\n    throw new Error(\n      `Unable to get branches, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  const r = await response.json();\n  for (const object of r.values) {\n    if (object.displayId === branchName) {\n      return object;\n    }\n  }\n\n  return undefined;\n};\nconst createBranch = async (opts: {\n  project: string;\n  repo: string;\n  branchName: string;\n  authorization: string;\n  apiBaseUrl: string;\n  startPoint: string;\n}) => {\n  const { project, repo, branchName, authorization, apiBaseUrl, startPoint } =\n    opts;\n\n  let response: Response;\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      name: branchName,\n      startPoint,\n    }),\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/projects/${encodeURIComponent(\n        project,\n      )}/repos/${encodeURIComponent(repo)}/branches`,\n      options,\n    );\n  } catch (e) {\n    throw new Error(`Unable to create branch, ${e}`);\n  }\n\n  if (response.status !== 200) {\n    throw new Error(\n      `Unable to create branch, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  return await response.json();\n};\n/**\n * Creates a BitbucketServer Pull Request action.\n * @public\n */\nexport function createPublishBitbucketServerPullRequestAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    title: string;\n    description?: string;\n    targetBranch?: string;\n    sourceBranch: string;\n    token?: string;\n    gitAuthorName?: string;\n    gitAuthorEmail?: string;\n  }>({\n    id: 'publish:bitbucketServer:pull-request',\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl', 'title', 'sourceBranch'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            type: 'string',\n          },\n          title: {\n            title: 'Pull Request title',\n            type: 'string',\n            description: 'The title for the pull request',\n          },\n          description: {\n            title: 'Pull Request Description',\n            type: 'string',\n            description: 'The description of the pull request',\n          },\n          targetBranch: {\n            title: 'Target Branch',\n            type: 'string',\n            description: `Branch of repository to apply changes to. The default value is 'master'`,\n          },\n          sourceBranch: {\n            title: 'Source Branch',\n            type: 'string',\n            description: 'Branch of repository to copy changes from',\n          },\n          token: {\n            title: 'Authorization Token',\n            type: 'string',\n            description:\n              'The token to use for authorization to BitBucket Server',\n          },\n          gitAuthorName: {\n            title: 'Author Name',\n            type: 'string',\n            description: `Sets the author name for the commit. The default value is 'Scaffolder'`,\n          },\n          gitAuthorEmail: {\n            title: 'Author Email',\n            type: 'string',\n            description: `Sets the author email for the commit.`,\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          pullRequestUrl: {\n            title: 'A URL to the pull request with the provider',\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        title,\n        description,\n        targetBranch = 'master',\n        sourceBranch,\n        gitAuthorName,\n        gitAuthorEmail,\n      } = ctx.input;\n\n      const { project, repo, host } = parseRepoUrl(repoUrl, integrations);\n\n      if (!project) {\n        throw new InputError(\n          `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing project`,\n        );\n      }\n\n      const integrationConfig = integrations.bitbucketServer.byHost(host);\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      const token = ctx.input.token ?? integrationConfig.config.token;\n\n      const authConfig = {\n        ...integrationConfig.config,\n        ...{ token },\n      };\n\n      const reqOpts = getBitbucketServerRequestOptions(authConfig);\n      const authorization = reqOpts.headers.Authorization;\n      if (!authorization) {\n        throw new Error(\n          `Authorization has not been provided for ${integrationConfig.config.host}. Please add either (a) a user login auth token, or (b) a token input from the template or (c) username + password to the integration config.`,\n        );\n      }\n\n      const apiBaseUrl = integrationConfig.config.apiBaseUrl;\n\n      const toRef = await findBranches({\n        project,\n        repo,\n        branchName: targetBranch,\n        authorization,\n        apiBaseUrl,\n      });\n\n      let fromRef = await findBranches({\n        project,\n        repo,\n        branchName: sourceBranch,\n        authorization,\n        apiBaseUrl,\n      });\n\n      if (!fromRef) {\n        // create branch\n        ctx.logger.info(\n          `source branch not found -> creating branch named: ${sourceBranch} lastCommit: ${toRef.latestCommit}`,\n        );\n        const latestCommit = toRef.latestCommit;\n\n        fromRef = await createBranch({\n          project,\n          repo,\n          branchName: sourceBranch,\n          authorization,\n          apiBaseUrl,\n          startPoint: latestCommit,\n        });\n\n        const remoteUrl = `https://${host}/scm/${project}/${repo}.git`;\n\n        const auth = authConfig.token\n          ? {\n              token: token!,\n            }\n          : {\n              username: authConfig.username!,\n              password: authConfig.password!,\n            };\n\n        const gitAuthorInfo = {\n          name:\n            gitAuthorName ||\n            config.getOptionalString('scaffolder.defaultAuthor.name'),\n          email:\n            gitAuthorEmail ||\n            config.getOptionalString('scaffolder.defaultAuthor.email'),\n        };\n\n        const tempDir = await ctx.createTemporaryDirectory();\n        const sourceDir = getRepoSourceDirectory(ctx.workspacePath, undefined);\n        await cloneRepo({\n          url: remoteUrl,\n          dir: tempDir,\n          auth,\n          logger: ctx.logger,\n          ref: sourceBranch,\n        });\n\n        await createGitBranch({\n          dir: tempDir,\n          auth,\n          logger: ctx.logger,\n          ref: sourceBranch,\n        });\n\n        // copy files\n        fs.cpSync(sourceDir, tempDir, {\n          recursive: true,\n          filter: path => {\n            return !(path.indexOf('.git') > -1);\n          },\n        });\n\n        await addFiles({\n          dir: tempDir,\n          auth,\n          logger: ctx.logger,\n          filepath: '.',\n        });\n\n        await commitAndPushBranch({\n          dir: tempDir,\n          auth,\n          logger: ctx.logger,\n          commitMessage:\n            description ??\n            config.getOptionalString('scaffolder.defaultCommitMessage') ??\n            '',\n          gitAuthorInfo,\n          branch: sourceBranch,\n        });\n      }\n\n      const pullRequestUrl = await createPullRequest({\n        project,\n        repo,\n        title,\n        description,\n        toRef,\n        fromRef,\n        authorization,\n        apiBaseUrl,\n      });\n\n      ctx.output('pullRequestUrl', pullRequestUrl);\n    },\n  });\n}\n","/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  coreServices,\n  createBackendModule,\n} from '@backstage/backend-plugin-api';\nimport { scaffolderActionsExtensionPoint } from '@backstage/plugin-scaffolder-node/alpha';\nimport {\n  createPublishBitbucketServerAction,\n  createPublishBitbucketServerPullRequestAction,\n} from './actions';\nimport { ScmIntegrations } from '@backstage/integration';\n\n/**\n * @public\n * The Bitbucket Server Module for the Scaffolder Backend\n */\nexport const bitbucketServerModule = createBackendModule({\n  moduleId: 'bitbucketServer',\n  pluginId: 'scaffolder',\n  register({ registerInit }) {\n    registerInit({\n      deps: {\n        scaffolder: scaffolderActionsExtensionPoint,\n        config: coreServices.rootConfig,\n      },\n      async init({ scaffolder, config }) {\n        const integrations = ScmIntegrations.fromConfig(config);\n\n        scaffolder.addActions(\n          createPublishBitbucketServerAction({ integrations, config }),\n          createPublishBitbucketServerPullRequestAction({\n            integrations,\n            config,\n          }),\n        );\n      },\n    });\n  },\n});\n"],"names":["yaml","fetch","createTemplateAction","parseRepoUrl","InputError","getBitbucketServerRequestOptions","initRepoAndPush","getRepoSourceDirectory","cloneRepo","createGitBranch","fs","addFiles","commitAndPushBranch","createBackendModule","scaffolderActionsExtensionPoint","coreServices","ScmIntegrations"],"mappings":"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"}
import { stringifyEntityRef, DEFAULT_NAMESPACE, RELATION_PARENT_OF } from '@backstage/catalog-model';
import { getEntityRelations, useEntity, catalogApiRef, EntityRefLink } from '@backstage/plugin-catalog-react';
import Box from '@material-ui/core/Box';
import Grid from '@material-ui/core/Grid';
import Switch from '@material-ui/core/Switch';
import Typography from '@material-ui/core/Typography';
import { makeStyles, createStyles } from '@material-ui/core/styles';
import Pagination from '@material-ui/lab/Pagination';
import React, { useState } from 'react';
import useAsync from 'react-use/esm/useAsync';
import { Progress, ResponseErrorPanel, InfoCard, Avatar, Link, OverflowTooltip } from '@backstage/core-components';
import { useApi } from '@backstage/core-plugin-api';

const getMembersFromGroups = async (groups, catalogApi) => {
  const membersList = groups.length === 0 ? { items: [] } : await catalogApi.getEntities({
    filter: {
      kind: "User",
      "relations.memberof": groups.map(
        (group) => stringifyEntityRef({
          kind: "group",
          namespace: group.namespace.toLocaleLowerCase("en-US"),
          name: group.name.toLocaleLowerCase("en-US")
        })
      )
    }
  });
  return membersList.items;
};
const getDescendantGroupsFromGroup = async (group, catalogApi) => {
  var _a;
  const alreadyQueuedOrExpandedGroupNames = /* @__PURE__ */ new Map();
  const groupRef = {
    kind: group.kind,
    namespace: (_a = group.metadata.namespace) != null ? _a : DEFAULT_NAMESPACE,
    name: group.metadata.name
  };
  const groupQueue = [groupRef];
  const resultantGroupRefs = [];
  while (groupQueue.length > 0) {
    const activeGroupRef = groupQueue.shift();
    const activeGroup = await catalogApi.getEntityByRef(activeGroupRef);
    alreadyQueuedOrExpandedGroupNames.set(
      stringifyEntityRef(activeGroupRef),
      true
    );
    const childGroups = getEntityRelations(activeGroup, RELATION_PARENT_OF, {
      kind: "Group"
    }).filter(
      (currentGroup) => !alreadyQueuedOrExpandedGroupNames.has(
        stringifyEntityRef(currentGroup)
      )
    );
    childGroups.forEach(
      (childGroup) => alreadyQueuedOrExpandedGroupNames.set(
        stringifyEntityRef(childGroup),
        true
      )
    );
    groupQueue.push(...childGroups);
    resultantGroupRefs.push(...childGroups);
  }
  return resultantGroupRefs;
};
const getAllDesendantMembersForGroupEntity = async (groupEntity, catalogApi) => getMembersFromGroups(
  await getDescendantGroupsFromGroup(groupEntity, catalogApi),
  catalogApi
);
const removeDuplicateEntitiesFrom = (entityArray) => {
  const seenEntities = /* @__PURE__ */ new Map();
  return entityArray.filter((entity) => {
    const stringifiedEntity = stringifyEntityRef(entity);
    const isDuplicate = seenEntities.has(stringifiedEntity);
    seenEntities.set(stringifiedEntity, true);
    return !isDuplicate;
  });
};

const useStyles = makeStyles(
  (theme) => createStyles({
    card: {
      border: `1px solid ${theme.palette.divider}`,
      boxShadow: theme.shadows[2],
      borderRadius: "4px",
      overflow: "visible",
      position: "relative",
      margin: theme.spacing(4, 1, 1),
      flex: "1",
      minWidth: "0px"
    },
    avatar: {
      position: "absolute",
      top: "-2rem"
    }
  }),
  { name: "MembersListCardComponent" }
);
const MemberComponent = (props) => {
  var _a;
  const classes = useStyles();
  const {
    metadata: { name: metaName, description },
    spec: { profile }
  } = props.member;
  const displayName = (_a = profile == null ? void 0 : profile.displayName) != null ? _a : metaName;
  return /* @__PURE__ */ React.createElement(Box, { className: classes.card }, /* @__PURE__ */ React.createElement(
    Box,
    {
      display: "flex",
      flexDirection: "column",
      m: 3,
      alignItems: "center",
      justifyContent: "center"
    },
    /* @__PURE__ */ React.createElement(
      Avatar,
      {
        displayName,
        picture: profile == null ? void 0 : profile.picture,
        classes
      }
    ),
    /* @__PURE__ */ React.createElement(
      Box,
      {
        pt: 2,
        sx: {
          width: "100%"
        },
        textAlign: "center"
      },
      /* @__PURE__ */ React.createElement(Typography, { variant: "h6" }, /* @__PURE__ */ React.createElement(
        EntityRefLink,
        {
          "data-testid": "user-link",
          entityRef: props.member,
          title: displayName
        }
      )),
      (profile == null ? void 0 : profile.email) && /* @__PURE__ */ React.createElement(Link, { to: `mailto:${profile.email}` }, /* @__PURE__ */ React.createElement(OverflowTooltip, { text: profile.email })),
      description && /* @__PURE__ */ React.createElement(Typography, { variant: "subtitle2" }, description)
    )
  ));
};
const useListStyles = makeStyles((theme) => ({
  root: {
    height: "100%"
  },
  cardContent: {
    overflow: "auto"
  },
  memberList: {
    display: "grid",
    gap: theme.spacing(1.5),
    gridTemplateColumns: `repeat(auto-fit, minmax(auto, ${theme.spacing(
      34
    )}px))`
  }
}));
const MembersListCard = (props) => {
  var _a;
  const {
    memberDisplayTitle = "Members",
    pageSize = 50,
    showAggregateMembersToggle,
    relationsType = "direct"
  } = props;
  const classes = useListStyles();
  const { entity: groupEntity } = useEntity();
  const {
    metadata: { name: groupName, namespace: grpNamespace },
    spec: { profile }
  } = groupEntity;
  const catalogApi = useApi(catalogApiRef);
  const displayName = (_a = profile == null ? void 0 : profile.displayName) != null ? _a : groupName;
  const groupNamespace = grpNamespace || DEFAULT_NAMESPACE;
  const [page, setPage] = React.useState(1);
  const pageChange = (_, pageIndex) => {
    setPage(pageIndex);
  };
  const [showAggregateMembers, setShowAggregateMembers] = useState(
    relationsType === "aggregated"
  );
  const { loading: loadingDescendantMembers, value: descendantMembers } = useAsync(async () => {
    if (!showAggregateMembers) {
      return [];
    }
    return await getAllDesendantMembersForGroupEntity(
      groupEntity,
      catalogApi
    );
  }, [catalogApi, groupEntity, showAggregateMembers]);
  const {
    loading,
    error,
    value: directMembers
  } = useAsync(async () => {
    const membersList = await catalogApi.getEntities({
      filter: {
        kind: "User",
        "relations.memberof": [
          stringifyEntityRef({
            kind: "group",
            namespace: groupNamespace.toLocaleLowerCase("en-US"),
            name: groupName.toLocaleLowerCase("en-US")
          })
        ]
      }
    });
    return membersList.items;
  }, [catalogApi, groupEntity]);
  const members = removeDuplicateEntitiesFrom(
    [
      ...directMembers != null ? directMembers : [],
      ...descendantMembers && showAggregateMembers ? descendantMembers : []
    ].sort(
      (a, b) => stringifyEntityRef(a).localeCompare(stringifyEntityRef(b))
    )
  );
  if (loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  } else if (error) {
    return /* @__PURE__ */ React.createElement(ResponseErrorPanel, { error });
  }
  const nbPages = Math.ceil(((members == null ? void 0 : members.length) || 0) / pageSize);
  const paginationLabel = nbPages < 2 ? "" : `, page ${page} of ${nbPages}`;
  const pagination = /* @__PURE__ */ React.createElement(
    Pagination,
    {
      count: nbPages,
      page,
      onChange: pageChange,
      showFirstButton: true,
      showLastButton: true
    }
  );
  let memberList;
  if (members && members.length > 0) {
    memberList = /* @__PURE__ */ React.createElement(Box, { className: classes.memberList }, members.slice(pageSize * (page - 1), pageSize * page).map((member) => /* @__PURE__ */ React.createElement(MemberComponent, { member, key: stringifyEntityRef(member) })));
  } else {
    memberList = /* @__PURE__ */ React.createElement(Box, { p: 2 }, /* @__PURE__ */ React.createElement(Typography, null, "This group has no ", memberDisplayTitle.toLocaleLowerCase(), "."));
  }
  return /* @__PURE__ */ React.createElement(Grid, { item: true, className: classes.root }, /* @__PURE__ */ React.createElement(
    InfoCard,
    {
      title: `${memberDisplayTitle} (${(members == null ? void 0 : members.length) || 0}${paginationLabel})`,
      subheader: `of ${displayName}`,
      ...nbPages <= 1 ? {} : { actions: pagination },
      className: classes.root,
      cardClassName: classes.cardContent
    },
    showAggregateMembersToggle && /* @__PURE__ */ React.createElement(React.Fragment, null, "Direct Members", /* @__PURE__ */ React.createElement(
      Switch,
      {
        color: "primary",
        checked: showAggregateMembers,
        onChange: () => {
          setShowAggregateMembers(!showAggregateMembers);
        },
        inputProps: { "aria-label": "Users Type Switch" }
      }
    ), "Aggregated Members"),
    showAggregateMembers && loadingDescendantMembers ? /* @__PURE__ */ React.createElement(Progress, null) : memberList
  ));
};

export { MembersListCard };
//# sourceMappingURL=MembersListCard-DB1VdRYu.esm.js.map

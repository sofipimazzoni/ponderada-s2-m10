import { RELATION_CONSUMES_API, RELATION_HAS_PART, RELATION_PROVIDES_API } from '@backstage/catalog-model';
import Typography from '@material-ui/core/Typography';
import { EntityTable, useEntity, useRelatedEntities } from '@backstage/plugin-catalog-react';
import React, { useEffect, useState } from 'react';
import { InfoCard, Progress, WarningPanel, CodeSnippet, Link } from '@backstage/core-components';
import ExtensionIcon from '@material-ui/icons/Extension';
import ToggleButton from '@material-ui/lab/ToggleButton';
import '@material-ui/lab/Alert';
import { a as apiDocsConfigRef } from './ApiDefinitionWidget-B2Z_EBYd.esm.js';
import { useApi } from '@backstage/core-plugin-api';
import { makeStyles } from '@material-ui/core/styles';
import { P as PlainApiDefinitionWidget, A as ApiTypeTitle } from './ApiTypeTitle-Q7DWBnfV.esm.js';
import Box from '@material-ui/core/Box';
import Button from '@material-ui/core/Button';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogContent from '@material-ui/core/DialogContent';
import DialogTitle from '@material-ui/core/DialogTitle';
import Tab from '@material-ui/core/Tab';
import Tabs from '@material-ui/core/Tabs';

const useStyles = makeStyles((theme) => ({
  fullHeightDialog: {
    height: "calc(100% - 64px)"
  },
  root: {
    display: "flex",
    flexGrow: 1,
    width: "100%",
    height: "100%"
  },
  tabs: {
    borderRight: `1px solid ${theme.palette.divider}`,
    flexShrink: 0
  },
  tabContents: {
    flexGrow: 1,
    overflowX: "auto"
  },
  title: {
    color: theme.palette.text.primary,
    wordBreak: "break-word",
    fontSize: theme.typography.h3.fontSize,
    marginBottom: 0
  },
  type: {
    textTransform: "uppercase",
    fontSize: 11,
    opacity: 0.8,
    marginBottom: theme.spacing(1),
    color: theme.palette.text.primary
  }
}));
function TabPanel(props) {
  const { children, value, index, ...other } = props;
  const classes = useStyles();
  return /* @__PURE__ */ React.createElement(
    "div",
    {
      role: "tabpanel",
      hidden: value !== index,
      id: `vertical-tabpanel-${index}`,
      "aria-labelledby": `vertical-tab-${index}`,
      className: classes.tabContents,
      ...other
    },
    value === index && /* @__PURE__ */ React.createElement(Box, { pl: 3, pr: 3 }, children)
  );
}
function a11yProps(index) {
  return {
    id: `vertical-tab-${index}`,
    "aria-controls": `vertical-tabpanel-${index}`
  };
}
function ApiDefinitionDialog(props) {
  var _a, _b, _c;
  const { open, entity, onClose } = props;
  const [activeTab, setActiveTab] = React.useState(0);
  const classes = useStyles();
  useEffect(() => {
    setActiveTab(0);
  }, [open]);
  const config = useApi(apiDocsConfigRef);
  const definitionWidget = config.getApiDefinitionWidget(entity);
  let tabIndex = 0;
  let tabPanelIndex = 0;
  return /* @__PURE__ */ React.createElement(
    Dialog,
    {
      fullWidth: true,
      maxWidth: "xl",
      open,
      onClose,
      "aria-labelledby": "api-definition-dialog-title",
      PaperProps: { className: classes.fullHeightDialog }
    },
    /* @__PURE__ */ React.createElement(DialogTitle, { id: "api-definition-dialog-title", disableTypography: true }, /* @__PURE__ */ React.createElement(Typography, { className: classes.type }, "API - ", (_a = definitionWidget == null ? void 0 : definitionWidget.title) != null ? _a : "Raw"), /* @__PURE__ */ React.createElement(Typography, { className: classes.title, variant: "h1" }, (_b = entity.metadata.title) != null ? _b : entity.metadata.name)),
    /* @__PURE__ */ React.createElement(DialogContent, { dividers: true, className: classes.root }, /* @__PURE__ */ React.createElement(
      Tabs,
      {
        orientation: "vertical",
        variant: "scrollable",
        value: activeTab,
        onChange: (_, newValue) => setActiveTab(newValue),
        "aria-label": "API definition options",
        className: classes.tabs
      },
      definitionWidget ? /* @__PURE__ */ React.createElement(Tab, { label: definitionWidget.title, ...a11yProps(tabIndex++) }) : null,
      /* @__PURE__ */ React.createElement(Tab, { label: "Raw", ...a11yProps(tabIndex++) })
    ), definitionWidget ? /* @__PURE__ */ React.createElement(TabPanel, { value: activeTab, index: tabPanelIndex++ }, definitionWidget.component(entity.spec.definition)) : null, /* @__PURE__ */ React.createElement(TabPanel, { value: activeTab, index: tabPanelIndex++ }, /* @__PURE__ */ React.createElement(
      PlainApiDefinitionWidget,
      {
        definition: entity.spec.definition,
        language: (_c = definitionWidget == null ? void 0 : definitionWidget.rawLanguage) != null ? _c : entity.spec.type
      }
    ))),
    /* @__PURE__ */ React.createElement(DialogActions, null, /* @__PURE__ */ React.createElement(Button, { onClick: onClose, color: "primary" }, "Close"))
  );
}

function createSpecApiTypeColumn() {
  return {
    title: "Type",
    field: "spec.type",
    render: (entity) => /* @__PURE__ */ React.createElement(ApiTypeTitle, { apiEntity: entity })
  };
}
const ApiDefinitionButton = ({ apiEntity }) => {
  const [dialogOpen, setDialogOpen] = useState(false);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    ToggleButton,
    {
      "aria-label": "Toggle API Definition Dialog",
      onClick: () => setDialogOpen(!dialogOpen)
    },
    /* @__PURE__ */ React.createElement(ExtensionIcon, null)
  ), /* @__PURE__ */ React.createElement(
    ApiDefinitionDialog,
    {
      entity: apiEntity,
      open: dialogOpen,
      onClose: () => setDialogOpen(false)
    }
  ));
};
function createApiDefinitionColumn() {
  return {
    title: "API Definition",
    render: (entity) => /* @__PURE__ */ React.createElement(ApiDefinitionButton, { apiEntity: entity })
  };
}
const apiEntityColumns = [
  EntityTable.columns.createEntityRefColumn({ defaultKind: "API" }),
  EntityTable.columns.createSystemColumn(),
  EntityTable.columns.createOwnerColumn(),
  createSpecApiTypeColumn(),
  EntityTable.columns.createSpecLifecycleColumn(),
  EntityTable.columns.createMetadataDescriptionColumn(),
  createApiDefinitionColumn()
];

const ConsumedApisCard = (props) => {
  const { variant = "gridItem", columns = apiEntityColumns } = props;
  const { entity } = useEntity();
  const { entities, loading, error } = useRelatedEntities(entity, {
    type: RELATION_CONSUMES_API
  });
  if (loading) {
    return /* @__PURE__ */ React.createElement(InfoCard, { variant, title: "Consumed APIs" }, /* @__PURE__ */ React.createElement(Progress, null));
  }
  if (error || !entities) {
    return /* @__PURE__ */ React.createElement(InfoCard, { variant, title: "Consumed APIs" }, /* @__PURE__ */ React.createElement(
      WarningPanel,
      {
        severity: "error",
        title: "Could not load APIs",
        message: /* @__PURE__ */ React.createElement(CodeSnippet, { text: `${error}`, language: "text" })
      }
    ));
  }
  return /* @__PURE__ */ React.createElement(
    EntityTable,
    {
      title: "Consumed APIs",
      variant,
      emptyContent: /* @__PURE__ */ React.createElement("div", { style: { textAlign: "center" } }, /* @__PURE__ */ React.createElement(Typography, { variant: "body1" }, "This ", entity.kind.toLocaleLowerCase("en-US"), " does not consume any APIs."), /* @__PURE__ */ React.createElement(Typography, { variant: "body2" }, /* @__PURE__ */ React.createElement(Link, { to: "https://backstage.io/docs/features/software-catalog/descriptor-format#specconsumesapis-optional" }, "Learn how to change this."))),
      columns,
      entities
    }
  );
};

const presetColumns = [
  EntityTable.columns.createEntityRefColumn({ defaultKind: "API" }),
  EntityTable.columns.createOwnerColumn(),
  createSpecApiTypeColumn(),
  EntityTable.columns.createSpecLifecycleColumn(),
  EntityTable.columns.createMetadataDescriptionColumn()
];
const HasApisCard = (props) => {
  const { variant = "gridItem", columns = presetColumns } = props;
  const { entity } = useEntity();
  const { entities, loading, error } = useRelatedEntities(entity, {
    type: RELATION_HAS_PART,
    kind: "API"
  });
  if (loading) {
    return /* @__PURE__ */ React.createElement(InfoCard, { variant, title: "APIs" }, /* @__PURE__ */ React.createElement(Progress, null));
  }
  if (error || !entities) {
    return /* @__PURE__ */ React.createElement(InfoCard, { variant, title: "APIs" }, /* @__PURE__ */ React.createElement(
      WarningPanel,
      {
        severity: "error",
        title: "Could not load APIs",
        message: /* @__PURE__ */ React.createElement(CodeSnippet, { text: `${error}`, language: "text" })
      }
    ));
  }
  return /* @__PURE__ */ React.createElement(
    EntityTable,
    {
      title: "APIs",
      variant,
      emptyContent: /* @__PURE__ */ React.createElement("div", { style: { textAlign: "center" } }, /* @__PURE__ */ React.createElement(Typography, { variant: "body1" }, "This ", entity.kind.toLocaleLowerCase("en-US"), " does not contain any APIs."), /* @__PURE__ */ React.createElement(Typography, { variant: "body2" }, /* @__PURE__ */ React.createElement(Link, { to: "https://backstage.io/docs/features/software-catalog/descriptor-format#kind-api" }, "Learn how to change this."))),
      columns,
      entities
    }
  );
};

const ProvidedApisCard = (props) => {
  const { variant = "gridItem", columns = apiEntityColumns } = props;
  const { entity } = useEntity();
  const { entities, loading, error } = useRelatedEntities(entity, {
    type: RELATION_PROVIDES_API
  });
  if (loading) {
    return /* @__PURE__ */ React.createElement(InfoCard, { variant, title: "Provided APIs" }, /* @__PURE__ */ React.createElement(Progress, null));
  }
  if (error || !entities) {
    return /* @__PURE__ */ React.createElement(InfoCard, { variant, title: "Provided APIs" }, /* @__PURE__ */ React.createElement(
      WarningPanel,
      {
        severity: "error",
        title: "Could not load APIs",
        message: /* @__PURE__ */ React.createElement(CodeSnippet, { text: `${error}`, language: "text" })
      }
    ));
  }
  return /* @__PURE__ */ React.createElement(
    EntityTable,
    {
      title: "Provided APIs",
      variant,
      emptyContent: /* @__PURE__ */ React.createElement("div", { style: { textAlign: "center" } }, /* @__PURE__ */ React.createElement(Typography, { variant: "body1" }, "This ", entity.kind.toLocaleLowerCase("en-US"), " does not provide any APIs."), /* @__PURE__ */ React.createElement(Typography, { variant: "body2" }, /* @__PURE__ */ React.createElement(Link, { to: "https://backstage.io/docs/features/software-catalog/descriptor-format#specprovidesapis-optional" }, "Learn how to change this."))),
      columns,
      entities
    }
  );
};

export { ApiDefinitionDialog as A, ConsumedApisCard as C, HasApisCard as H, ProvidedApisCard as P };
//# sourceMappingURL=ProvidedApisCard-DYM2U8N2.esm.js.map

import { createApiRef } from '@backstage/core-plugin-api';
export { a as TechDocsClient, T as TechDocsStorageClient } from './esm/routes-VopnMGN0.esm.js';
export { R as Reader, a as TechDocsReaderLayout, d as TechDocsReaderPageContent, c as TechDocsReaderPageHeader, e as TechDocsReaderPageSubheader, b as TechDocsReaderProvider, f as TechDocsSearch } from './esm/TechDocsReaderPage-jsKVX28r.esm.js';
import { D as DocsCardGrid } from './esm/DocsCardGrid-AWTYz1vR.esm.js';
import { WarningPanel, CodeSnippet, Progress, Link, Content, ContentHeader } from '@backstage/core-components';
import { useEntityList, useEntityOwnership } from '@backstage/plugin-catalog-react';
import Typography from '@material-ui/core/Typography';
import React from 'react';
export { a as DefaultTechDocsHome, D as DocsTable, E as EntityListDocsTable, T as TechDocsPageWrapper, b as TechDocsPicker } from './esm/TechDocsIndexPage-BCP1ggek.esm.js';
export { e as EmbeddedDocsRouter, E as EntityTechdocsContent, R as Router, T as TechDocsCustomHome, a as TechDocsIndexPage, c as TechDocsReaderPage, d as TechDocsSearchResultListItem, b as TechdocsPage, i as isTechDocsAvailable, t as plugin, t as techdocsPlugin } from './esm/Router-jrzAl2lO.esm.js';
import '@backstage/errors';
import 'event-source-polyfill';
import 'react-router-dom';
import '@backstage/plugin-techdocs-react';
import '@material-ui/core/Grid';
import '@material-ui/core/styles';
import '@backstage/plugin-search-react';
import './esm/TechDocsSearchResultListItem-4Qzh5-3s.esm.js';
import '@material-ui/core/ListItemIcon';
import '@material-ui/core/ListItemText';
import '@material-ui/core/CircularProgress';
import '@material-ui/core/Button';
import '@material-ui/lab/Alert';
import '@material-ui/core/Drawer';
import '@material-ui/core/IconButton';
import '@material-ui/icons/Close';
import 'react-use/esm/useAsync';
import 'react-use/esm/useAsyncRetry';
import '@material-ui/core/useMediaQuery';
import '@backstage/integration-react';
import 'dompurify';
import '@backstage/integration';
import '@material-ui/icons/FeedbackOutlined';
import 'git-url-parse';
import '@material-ui/icons/Menu';
import '@material-ui/core/SvgIcon';
import '@material-ui/core/Tooltip';
import 'react-use/esm/useCopyToClipboard';
import '@material-ui/core/Portal';
import 'react-helmet';
import '@material-ui/lab/Skeleton';
import '@material-ui/icons/Code';
import '@backstage/catalog-model';
import 'lodash';
import '@material-ui/core/Toolbar';
import '@material-ui/core/Menu';
import '@material-ui/core/Box';
import '@material-ui/icons/Settings';
import '@backstage/plugin-auth-react';
import '@material-ui/core/Card';
import '@material-ui/core/CardActions';
import '@material-ui/core/CardContent';
import '@material-ui/core/CardMedia';
import '@material-ui/icons/Share';
import '@material-ui/icons/Star';
import '@material-ui/icons/StarBorder';

const techdocsStorageApiRef = createApiRef({
  id: "plugin.techdocs.storageservice"
});
const techdocsApiRef = createApiRef({
  id: "plugin.techdocs.service"
});

const allEntitiesGroup = {
  title: "All Documentation",
  filterPredicate: () => true
};
const EntityListDocsGridGroup = (props) => {
  const { entities, group } = props;
  const { loading: loadingOwnership, isOwnedEntity } = useEntityOwnership();
  const shownEntities = entities.filter((entity) => {
    if (group.filterPredicate === "ownedByUser") {
      if (loadingOwnership) {
        return false;
      }
      return isOwnedEntity(entity);
    }
    return typeof group.filterPredicate === "function" && group.filterPredicate(entity);
  });
  const titleComponent = (() => {
    return typeof group.title === "string" ? /* @__PURE__ */ React.createElement(ContentHeader, { title: group.title }) : group.title;
  })();
  if (shownEntities.length === 0) {
    return null;
  }
  return /* @__PURE__ */ React.createElement(Content, null, titleComponent, /* @__PURE__ */ React.createElement(DocsCardGrid, { entities: shownEntities }));
};
const EntityListDocsGrid = (props) => {
  const { loading, error, entities } = useEntityList();
  if (error) {
    return /* @__PURE__ */ React.createElement(
      WarningPanel,
      {
        severity: "error",
        title: "Could not load available documentation."
      },
      /* @__PURE__ */ React.createElement(CodeSnippet, { language: "text", text: error.toString() })
    );
  }
  if (loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  }
  if (entities.length === 0) {
    return /* @__PURE__ */ React.createElement("div", { "data-testid": "doc-not-found" }, /* @__PURE__ */ React.createElement(Typography, { variant: "body2" }, "No documentation found that match your filter. Learn more about", " ", /* @__PURE__ */ React.createElement(Link, { to: "https://backstage.io/docs/features/techdocs/creating-and-publishing" }, "publishing documentation"), "."));
  }
  entities.sort(
    (a, b) => {
      var _a, _b;
      return ((_a = a.metadata.title) != null ? _a : a.metadata.name).localeCompare(
        (_b = b.metadata.title) != null ? _b : b.metadata.name
      );
    }
  );
  return /* @__PURE__ */ React.createElement(Content, null, (props.groups || [allEntitiesGroup]).map((group, index) => /* @__PURE__ */ React.createElement(
    EntityListDocsGridGroup,
    {
      entities,
      group,
      key: `${group.title}-${index}`
    }
  )));
};

export { DocsCardGrid, EntityListDocsGrid, techdocsApiRef, techdocsStorageApiRef };
//# sourceMappingURL=index.esm.js.map

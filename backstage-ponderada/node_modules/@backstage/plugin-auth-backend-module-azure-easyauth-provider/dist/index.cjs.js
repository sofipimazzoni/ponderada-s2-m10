'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendPluginApi = require('@backstage/backend-plugin-api');
var pluginAuthNode = require('@backstage/plugin-auth-node');
var errors = require('@backstage/errors');
var jose = require('jose');

const ID_TOKEN_HEADER = "x-ms-token-aad-id-token";
const ACCESS_TOKEN_HEADER = "x-ms-token-aad-access-token";
const azureEasyAuthAuthenticator = pluginAuthNode.createProxyAuthenticator({
  defaultProfileTransform: async (result) => {
    var _a, _b;
    return {
      profile: {
        displayName: result.fullProfile.displayName,
        email: (_a = result.fullProfile.emails) == null ? void 0 : _a[0].value,
        picture: (_b = result.fullProfile.photos) == null ? void 0 : _b[0].value
      }
    };
  },
  initialize() {
  },
  async authenticate({ req }) {
    const result = await getResult(req);
    return {
      result,
      providerInfo: {
        accessToken: result.accessToken
      }
    };
  }
});
async function getResult(req) {
  const idToken = req.header(ID_TOKEN_HEADER);
  const accessToken = req.header(ACCESS_TOKEN_HEADER);
  if (idToken === void 0) {
    throw new errors.AuthenticationError(`Missing ${ID_TOKEN_HEADER} header`);
  }
  return {
    fullProfile: idTokenToProfile(idToken),
    accessToken
  };
}
function idTokenToProfile(idToken) {
  const claims = jose.decodeJwt(idToken);
  if (claims.ver !== "2.0") {
    throw new Error("id_token is not version 2.0 ");
  }
  return {
    id: claims.oid,
    displayName: claims.name,
    provider: "easyauth",
    emails: [{ value: claims.email }],
    username: claims.preferred_username
  };
}

exports.azureEasyAuthSignInResolvers = void 0;
((azureEasyAuthSignInResolvers2) => {
  azureEasyAuthSignInResolvers2.idMatchingUserEntityAnnotation = pluginAuthNode.createSignInResolverFactory({
    create() {
      return async (info, ctx) => {
        const {
          fullProfile: { id }
        } = info.result;
        if (!id) {
          throw new Error("User profile contained no id");
        }
        return await ctx.signInWithCatalogUser({
          annotations: {
            "graph.microsoft.com/user-id": id
          }
        });
      };
    }
  });
})(exports.azureEasyAuthSignInResolvers || (exports.azureEasyAuthSignInResolvers = {}));

const authModuleAzureEasyAuthProvider = backendPluginApi.createBackendModule({
  pluginId: "auth",
  moduleId: "azure-easyauth-provider",
  register(reg) {
    reg.registerInit({
      deps: {
        providers: pluginAuthNode.authProvidersExtensionPoint
      },
      async init({ providers }) {
        validateAppServiceConfiguration(process.env);
        providers.registerProvider({
          providerId: "azureEasyAuth",
          factory: pluginAuthNode.createProxyAuthProviderFactory({
            authenticator: azureEasyAuthAuthenticator,
            signInResolverFactories: {
              ...pluginAuthNode.commonSignInResolvers,
              ...exports.azureEasyAuthSignInResolvers
            }
          })
        });
      }
    });
  }
});
function validateAppServiceConfiguration(env) {
  var _a, _b, _c;
  if (env.WEBSITE_SKU === void 0) {
    throw new Error("Backstage is not running on Azure App Services");
  }
  if (((_a = env.WEBSITE_AUTH_ENABLED) == null ? void 0 : _a.toLocaleLowerCase("en-US")) !== "true") {
    throw new Error("Azure App Services does not have authentication enabled");
  }
  if (((_b = env.WEBSITE_AUTH_DEFAULT_PROVIDER) == null ? void 0 : _b.toLocaleLowerCase("en-US")) !== "azureactivedirectory") {
    throw new Error("Authentication provider is not Entra ID");
  }
  if (((_c = env.WEBSITE_AUTH_TOKEN_STORE) == null ? void 0 : _c.toLocaleLowerCase("en-US")) !== "true") {
    throw new Error("Token Store is not enabled");
  }
}

exports.azureEasyAuthAuthenticator = azureEasyAuthAuthenticator;
exports.default = authModuleAzureEasyAuthProvider;
//# sourceMappingURL=index.cjs.js.map

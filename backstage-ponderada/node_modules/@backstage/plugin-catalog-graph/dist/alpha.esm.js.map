{"version":3,"file":"alpha.esm.js","sources":["../src/alpha.tsx"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport {\n  createPageExtension,\n  createPlugin,\n  createSchemaFromZod,\n} from '@backstage/frontend-plugin-api';\nimport {\n  compatWrapper,\n  convertLegacyRouteRef,\n} from '@backstage/core-compat-api';\nimport { createEntityCardExtension } from '@backstage/plugin-catalog-react/alpha';\nimport { catalogGraphRouteRef, catalogEntityRouteRef } from './routes';\nimport { Direction } from './components';\n\nfunction getEntityGraphRelationsConfigSchema(\n  z: Parameters<Parameters<typeof createSchemaFromZod>[0]>[0],\n) {\n  // Mapping EntityRelationsGraphProps to config\n  // The classname and render functions are configurable only via extension overrides\n  return z.object({\n    kinds: z.array(z.string()).optional(),\n    relations: z.array(z.string()).optional(),\n    maxDepth: z.number().optional(),\n    unidirectional: z.boolean().optional(),\n    mergeRelations: z.boolean().optional(),\n    direction: z.nativeEnum(Direction).optional(),\n    relationPairs: z.array(z.tuple([z.string(), z.string()])).optional(),\n    zoom: z.enum(['enabled', 'disabled', 'enable-on-click']).optional(),\n    curve: z.enum(['curveStepBefore', 'curveMonotoneX']).optional(),\n  });\n}\n\nconst CatalogGraphEntityCard = createEntityCardExtension({\n  name: 'relations',\n  configSchema: createSchemaFromZod(z =>\n    z\n      .object({\n        // Filter is a config required to all entity cards\n        filter: z.string().optional(),\n        title: z.string().optional(),\n        height: z.number().optional(),\n        // Skipping a \"variant\" config for now, defaulting to \"gridItem\" in the component\n        // For more details, see this comment: https://github.com/backstage/backstage/pull/22619#discussion_r1477333252\n      })\n      .merge(getEntityGraphRelationsConfigSchema(z)),\n  ),\n  loader: async ({ config: { filter, ...props } }) =>\n    import('./components/CatalogGraphCard').then(m =>\n      compatWrapper(<m.CatalogGraphCard {...props} />),\n    ),\n});\n\nconst CatalogGraphPage = createPageExtension({\n  defaultPath: '/catalog-graph',\n  routeRef: convertLegacyRouteRef(catalogGraphRouteRef),\n  configSchema: createSchemaFromZod(z =>\n    z.object({\n      // Path is a default config required to all pages\n      path: z.string().default('/catalog-graph'),\n      // Mapping intialState prop to config, these are the initial filter values, as opposed to configuration of the available filter values\n      initialState: z\n        .object({\n          selectedKinds: z.array(z.string()).optional(),\n          selectedRelations: z.array(z.string()).optional(),\n          rootEntityRefs: z.array(z.string()).optional(),\n          maxDepth: z.number().optional(),\n          unidirectional: z.boolean().optional(),\n          mergeRelations: z.boolean().optional(),\n          direction: z.nativeEnum(Direction).optional(),\n          showFilters: z.boolean().optional(),\n          curve: z.enum(['curveStepBefore', 'curveMonotoneX']).optional(),\n        })\n        .merge(getEntityGraphRelationsConfigSchema(z))\n        .optional(),\n    }),\n  ),\n  loader: ({ config: { path, ...props } }) =>\n    import('./components/CatalogGraphPage').then(m =>\n      compatWrapper(<m.CatalogGraphPage {...props} />),\n    ),\n});\n\nexport default createPlugin({\n  id: 'catalog-graph',\n  routes: {\n    catalogGraph: convertLegacyRouteRef(catalogGraphRouteRef),\n  },\n  externalRoutes: {\n    catalogEntity: convertLegacyRouteRef(catalogEntityRouteRef),\n  },\n  extensions: [CatalogGraphPage, CatalogGraphEntityCard],\n});\n"],"names":[],"mappings":"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"}
{"version":3,"file":"index.cjs.js","sources":["../src/actions/bitbucket.examples.ts","../src/actions/bitbucket.ts","../src/deprecated.ts","../src/module.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TemplateExample } from '@backstage/plugin-scaffolder-node';\nimport yaml from 'yaml';\n\nexport const examples: TemplateExample[] = [\n  {\n    description:\n      'Initializes a git repository with the content in the workspace, and publishes it to Bitbucket with the default configuration.',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:bitbucket',\n          name: 'Publish to Bitbucket',\n          input: {\n            repoUrl:\n              'bitbucket.org?repo=repo&workspace=workspace&project=project',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Initializes a Bitbucket repository with a description.',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:bitbucket',\n          name: 'Publish to Bitbucket',\n          input: {\n            repoUrl:\n              'bitbucket.org?repo=repo&workspace=workspace&project=project',\n            description: 'Initialize a git repository',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Initializes a Bitbucket repository with public repo visibility, if not set defaults to private',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:bitbucket',\n          name: 'Publish to Bitbucket',\n          input: {\n            repoUrl:\n              'bitbucket.org?repo=repo&workspace=workspace&project=project',\n            repoVisibility: 'public',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Initializes a Bitbucket repository with a default branch, if not set defaults to master',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:bitbucket',\n          name: 'Publish to Bitbucket',\n          input: {\n            repoUrl:\n              'bitbucket.org?repo=repo&workspace=workspace&project=project',\n            defaultBranch: 'main',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:bitbucket',\n          name: 'Publish to Bitbucket',\n          input: {\n            repoUrl:\n              'bitbucket.org?repo=repo&workspace=workspace&project=project',\n            sourcePath: './repoRoot',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Initializes a Bitbucket repository with LFS enabled',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:bitbucket',\n          name: 'Publish to Bitbucket',\n          input: {\n            repoUrl: 'hosted.bitbucket.com?project=project&repo=repo',\n            enableLFS: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Initializes a Bitbucket repository with a custom authentication token',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:bitbucket',\n          name: 'Publish to Bitbucket',\n          input: {\n            repoUrl:\n              'bitbucket.org?repo=repo&workspace=workspace&project=project',\n            token: 'your-auth-token',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Initializes a Bitbucket repository with an initial commit message, if not set defaults to `initial commit`',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:bitbucket',\n          name: 'Publish to Bitbucket',\n          input: {\n            repoUrl:\n              'bitbucket.org?repo=repo&workspace=workspace&project=project',\n            gitCommitMessage: 'Initial commit with custom message',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Initializes a Bitbucket repository with a custom author',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:bitbucket',\n          name: 'Publish to Bitbucket',\n          input: {\n            repoUrl:\n              'bitbucket.org?repo=repo&workspace=workspace&project=project',\n            gitAuthorName: 'Your Name',\n            gitAuthorEmail: 'your.email@example.com',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Initializes a Bitbucket repository with all proporties being set',\n    example: yaml.stringify({\n      steps: [\n        {\n          id: 'publish',\n          action: 'publish:bitbucket',\n          name: 'Publish to Bitbucket',\n          input: {\n            repoUrl:\n              'bitbucket.org?repo=repo&workspace=workspace&project=project',\n            description: 'Initialize a git repository',\n            repoVisibility: 'public',\n            defaultBranch: 'main',\n            token: 'your-auth-token',\n            gitCommitMessage: 'Initial commit with custom message',\n            gitAuthorName: 'Your Name',\n            gitAuthorEmail: 'your.email@example.com',\n          },\n        },\n      ],\n    }),\n  },\n];\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  BitbucketIntegrationConfig,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  createTemplateAction,\n  initRepoAndPush,\n  getRepoSourceDirectory,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport fetch, { Response, RequestInit } from 'node-fetch';\nimport { Config } from '@backstage/config';\nimport { examples } from './bitbucket.examples';\n\nconst createBitbucketCloudRepository = async (opts: {\n  workspace: string;\n  project: string;\n  repo: string;\n  description?: string;\n  repoVisibility: 'private' | 'public';\n  mainBranch: string;\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const {\n    workspace,\n    project,\n    repo,\n    description,\n    repoVisibility,\n    mainBranch,\n    authorization,\n    apiBaseUrl,\n  } = opts;\n\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      scm: 'git',\n      description: description,\n      is_private: repoVisibility === 'private',\n      project: { key: project },\n    }),\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  let response: Response;\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/repositories/${workspace}/${repo}`,\n      options,\n    );\n  } catch (e) {\n    throw new Error(`Unable to create repository, ${e}`);\n  }\n\n  if (response.status !== 200) {\n    throw new Error(\n      `Unable to create repository, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  const r = await response.json();\n  let remoteUrl = '';\n  for (const link of r.links.clone) {\n    if (link.name === 'https') {\n      remoteUrl = link.href;\n    }\n  }\n\n  // \"mainbranch.name\" cannot be set neither at create nor update of the repo\n  // the first pushed branch will be set as \"main branch\" then\n  const repoContentsUrl = `${r.links.html.href}/src/${mainBranch}`;\n  return { remoteUrl, repoContentsUrl };\n};\n\nconst createBitbucketServerRepository = async (opts: {\n  project: string;\n  repo: string;\n  description?: string;\n  repoVisibility: 'private' | 'public';\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const {\n    project,\n    repo,\n    description,\n    authorization,\n    repoVisibility,\n    apiBaseUrl,\n  } = opts;\n\n  let response: Response;\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      name: repo,\n      description: description,\n      public: repoVisibility === 'public',\n    }),\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(`${apiBaseUrl}/projects/${project}/repos`, options);\n  } catch (e) {\n    throw new Error(`Unable to create repository, ${e}`);\n  }\n\n  if (response.status !== 201) {\n    throw new Error(\n      `Unable to create repository, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  const r = await response.json();\n  let remoteUrl = '';\n  for (const link of r.links.clone) {\n    if (link.name === 'http') {\n      remoteUrl = link.href;\n    }\n  }\n\n  const repoContentsUrl = `${r.links.self[0].href}`;\n  return { remoteUrl, repoContentsUrl };\n};\n\nconst getAuthorizationHeader = (config: BitbucketIntegrationConfig) => {\n  if (config.username && config.appPassword) {\n    const buffer = Buffer.from(\n      `${config.username}:${config.appPassword}`,\n      'utf8',\n    );\n\n    return `Basic ${buffer.toString('base64')}`;\n  }\n\n  if (config.token) {\n    return `Bearer ${config.token}`;\n  }\n\n  throw new Error(\n    `Authorization has not been provided for Bitbucket. Please add either username + appPassword or token to the Integrations config`,\n  );\n};\n\nconst performEnableLFS = async (opts: {\n  authorization: string;\n  host: string;\n  project: string;\n  repo: string;\n}) => {\n  const { authorization, host, project, repo } = opts;\n\n  const options: RequestInit = {\n    method: 'PUT',\n    headers: {\n      Authorization: authorization,\n    },\n  };\n\n  const { ok, status, statusText } = await fetch(\n    `https://${host}/rest/git-lfs/admin/projects/${project}/repos/${repo}/enabled`,\n    options,\n  );\n\n  if (!ok)\n    throw new Error(\n      `Failed to enable LFS in the repository, ${status}: ${statusText}`,\n    );\n};\n\n/**\n * Creates a new action that initializes a git repository of the content in the workspace\n * and publishes it to Bitbucket.\n * @public\n * @deprecated in favor of \"createPublishBitbucketCloudAction\" by \\@backstage/plugin-scaffolder-backend-module-bitbucket-cloud and \"createPublishBitbucketServerAction\" by \\@backstage/plugin-scaffolder-backend-module-bitbucket-server\n */\nexport function createPublishBitbucketAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    description?: string;\n    defaultBranch?: string;\n    repoVisibility?: 'private' | 'public';\n    sourcePath?: string;\n    enableLFS?: boolean;\n    token?: string;\n    gitCommitMessage?: string;\n    gitAuthorName?: string;\n    gitAuthorEmail?: string;\n  }>({\n    id: 'publish:bitbucket',\n    description:\n      'Initializes a git repository of the content in the workspace, and publishes it to Bitbucket.',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            type: 'string',\n          },\n          description: {\n            title: 'Repository Description',\n            type: 'string',\n          },\n          repoVisibility: {\n            title: 'Repository Visibility',\n            type: 'string',\n            enum: ['private', 'public'],\n          },\n          defaultBranch: {\n            title: 'Default Branch',\n            type: 'string',\n            description: `Sets the default branch on the repository. The default value is 'master'`,\n          },\n          sourcePath: {\n            title: 'Source Path',\n            description:\n              'Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.',\n            type: 'string',\n          },\n          enableLFS: {\n            title: 'Enable LFS?',\n            description:\n              'Enable LFS for the repository. Only available for hosted Bitbucket.',\n            type: 'boolean',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to BitBucket',\n          },\n          gitCommitMessage: {\n            title: 'Git Commit Message',\n            type: 'string',\n            description: `Sets the commit message on the repository. The default value is 'initial commit'`,\n          },\n          gitAuthorName: {\n            title: 'Default Author Name',\n            type: 'string',\n            description: `Sets the default author name for the commit. The default value is 'Scaffolder'`,\n          },\n          gitAuthorEmail: {\n            title: 'Default Author Email',\n            type: 'string',\n            description: `Sets the default author email for the commit.`,\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          remoteUrl: {\n            title: 'A URL to the repository with the provider',\n            type: 'string',\n          },\n          repoContentsUrl: {\n            title: 'A URL to the root of the repository',\n            type: 'string',\n          },\n          commitHash: {\n            title: 'The git commit hash of the initial commit',\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      ctx.logger.warn(\n        `[Deprecated] Please migrate the use of action \"publish:bitbucket\" to \"publish:bitbucketCloud\" or \"publish:bitbucketServer\".`,\n      );\n      const {\n        repoUrl,\n        description,\n        defaultBranch = 'master',\n        repoVisibility = 'private',\n        enableLFS = false,\n        gitCommitMessage = 'initial commit',\n        gitAuthorName,\n        gitAuthorEmail,\n      } = ctx.input;\n\n      const { workspace, project, repo, host } = parseRepoUrl(\n        repoUrl,\n        integrations,\n      );\n\n      // Workspace is only required for bitbucket cloud\n      if (host === 'bitbucket.org') {\n        if (!workspace) {\n          throw new InputError(\n            `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing workspace`,\n          );\n        }\n      }\n\n      // Project is required for both bitbucket cloud and bitbucket server\n      if (!project) {\n        throw new InputError(\n          `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing project`,\n        );\n      }\n\n      const integrationConfig = integrations.bitbucket.byHost(host);\n\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      const authorization = getAuthorizationHeader(\n        ctx.input.token\n          ? {\n              host: integrationConfig.config.host,\n              apiBaseUrl: integrationConfig.config.apiBaseUrl,\n              token: ctx.input.token,\n            }\n          : integrationConfig.config,\n      );\n\n      const apiBaseUrl = integrationConfig.config.apiBaseUrl;\n\n      const createMethod =\n        host === 'bitbucket.org'\n          ? createBitbucketCloudRepository\n          : createBitbucketServerRepository;\n\n      const { remoteUrl, repoContentsUrl } = await createMethod({\n        authorization,\n        workspace: workspace || '',\n        project,\n        repo,\n        repoVisibility,\n        mainBranch: defaultBranch,\n        description,\n        apiBaseUrl,\n      });\n\n      const gitAuthorInfo = {\n        name: gitAuthorName\n          ? gitAuthorName\n          : config.getOptionalString('scaffolder.defaultAuthor.name'),\n        email: gitAuthorEmail\n          ? gitAuthorEmail\n          : config.getOptionalString('scaffolder.defaultAuthor.email'),\n      };\n\n      let auth;\n\n      if (ctx.input.token) {\n        auth = {\n          username: 'x-token-auth',\n          password: ctx.input.token,\n        };\n      } else {\n        auth = {\n          username: integrationConfig.config.username\n            ? integrationConfig.config.username\n            : 'x-token-auth',\n          password: integrationConfig.config.appPassword\n            ? integrationConfig.config.appPassword\n            : integrationConfig.config.token ?? '',\n        };\n      }\n\n      const commitResult = await initRepoAndPush({\n        dir: getRepoSourceDirectory(ctx.workspacePath, ctx.input.sourcePath),\n        remoteUrl,\n        auth,\n        defaultBranch,\n        logger: ctx.logger,\n        commitMessage: gitCommitMessage\n          ? gitCommitMessage\n          : config.getOptionalString('scaffolder.defaultCommitMessage'),\n        gitAuthorInfo,\n      });\n\n      if (enableLFS && host !== 'bitbucket.org') {\n        await performEnableLFS({ authorization, host, project, repo });\n      }\n\n      ctx.output('commitHash', commitResult?.commitHash);\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n    },\n  });\n}\n","/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as bitbucketCloud from '@backstage/plugin-scaffolder-backend-module-bitbucket-cloud';\nimport * as bitbucketServer from '@backstage/plugin-scaffolder-backend-module-bitbucket-server';\n\nexport { createPublishBitbucketAction } from './actions/bitbucket';\n\n/**\n * @public @deprecated use import from \\@backstage/plugin-scaffolder-backend-module-bitbucket-cloud instead\n */\nexport const createPublishBitbucketCloudAction =\n  bitbucketCloud.createPublishBitbucketCloudAction;\n\n/**\n * @public @deprecated use import from \\@backstage/plugin-scaffolder-backend-module-bitbucket-cloud instead\n */\nexport const createBitbucketPipelinesRunAction =\n  bitbucketCloud.createBitbucketPipelinesRunAction;\n\n/**\n * @public @deprecated use import from \\@backstage/plugin-scaffolder-backend-module-bitbucket-server instead\n */\nexport const createPublishBitbucketServerAction =\n  bitbucketServer.createPublishBitbucketServerAction;\n\n/**\n * @public @deprecated use import from \\@backstage/plugin-scaffolder-backend-module-bitbucket-server instead\n */\nexport const createPublishBitbucketServerPullRequestAction =\n  bitbucketServer.createPublishBitbucketServerPullRequestAction;\n","/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  coreServices,\n  createBackendModule,\n} from '@backstage/backend-plugin-api';\nimport { scaffolderActionsExtensionPoint } from '@backstage/plugin-scaffolder-node/alpha';\nimport {\n  createBitbucketPipelinesRunAction,\n  createPublishBitbucketCloudAction,\n  createPublishBitbucketServerAction,\n  createPublishBitbucketServerPullRequestAction,\n} from './deprecated';\nimport { ScmIntegrations } from '@backstage/integration';\n\n/**\n * The Bitbucket Module for the Scaffolder Backend\n * @public\n * @deprecated use module by \\@backstage/plugin-scaffolder-backend-module-bitbucket-cloud or \\@backstage/plugin-scaffolder-backend-module-bitbucket-server instead\n */\nexport const bitbucketModule = createBackendModule({\n  moduleId: 'bitbucket',\n  pluginId: 'scaffolder',\n  register({ registerInit }) {\n    registerInit({\n      deps: {\n        scaffolder: scaffolderActionsExtensionPoint,\n        config: coreServices.rootConfig,\n      },\n      async init({ scaffolder, config }) {\n        const integrations = ScmIntegrations.fromConfig(config);\n\n        scaffolder.addActions(\n          createPublishBitbucketCloudAction({ integrations, config }),\n          createPublishBitbucketServerAction({ integrations, config }),\n          createPublishBitbucketServerPullRequestAction({\n            integrations,\n            config,\n          }),\n          createBitbucketPipelinesRunAction({ integrations }),\n        );\n      },\n    });\n  },\n});\n"],"names":["yaml","fetch","createTemplateAction","parseRepoUrl","InputError","initRepoAndPush","getRepoSourceDirectory","bitbucketCloud","bitbucketServer","createBackendModule","scaffolderActionsExtensionPoint","coreServices","ScmIntegrations"],"mappings":"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"}
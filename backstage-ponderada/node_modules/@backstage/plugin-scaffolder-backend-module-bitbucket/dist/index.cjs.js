'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var bitbucketCloud = require('@backstage/plugin-scaffolder-backend-module-bitbucket-cloud');
var bitbucketServer = require('@backstage/plugin-scaffolder-backend-module-bitbucket-server');
var errors = require('@backstage/errors');
var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
var fetch = require('node-fetch');
var yaml = require('yaml');
var backendPluginApi = require('@backstage/backend-plugin-api');
var alpha = require('@backstage/plugin-scaffolder-node/alpha');
var integration = require('@backstage/integration');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

function _interopNamespaceCompat(e) {
  if (e && typeof e === 'object' && 'default' in e) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var bitbucketCloud__namespace = /*#__PURE__*/_interopNamespaceCompat(bitbucketCloud);
var bitbucketServer__namespace = /*#__PURE__*/_interopNamespaceCompat(bitbucketServer);
var fetch__default = /*#__PURE__*/_interopDefaultCompat(fetch);
var yaml__default = /*#__PURE__*/_interopDefaultCompat(yaml);

const examples = [
  {
    description: "Initializes a git repository with the content in the workspace, and publishes it to Bitbucket with the default configuration.",
    example: yaml__default.default.stringify({
      steps: [
        {
          id: "publish",
          action: "publish:bitbucket",
          name: "Publish to Bitbucket",
          input: {
            repoUrl: "bitbucket.org?repo=repo&workspace=workspace&project=project"
          }
        }
      ]
    })
  },
  {
    description: "Initializes a Bitbucket repository with a description.",
    example: yaml__default.default.stringify({
      steps: [
        {
          id: "publish",
          action: "publish:bitbucket",
          name: "Publish to Bitbucket",
          input: {
            repoUrl: "bitbucket.org?repo=repo&workspace=workspace&project=project",
            description: "Initialize a git repository"
          }
        }
      ]
    })
  },
  {
    description: "Initializes a Bitbucket repository with public repo visibility, if not set defaults to private",
    example: yaml__default.default.stringify({
      steps: [
        {
          id: "publish",
          action: "publish:bitbucket",
          name: "Publish to Bitbucket",
          input: {
            repoUrl: "bitbucket.org?repo=repo&workspace=workspace&project=project",
            repoVisibility: "public"
          }
        }
      ]
    })
  },
  {
    description: "Initializes a Bitbucket repository with a default branch, if not set defaults to master",
    example: yaml__default.default.stringify({
      steps: [
        {
          id: "publish",
          action: "publish:bitbucket",
          name: "Publish to Bitbucket",
          input: {
            repoUrl: "bitbucket.org?repo=repo&workspace=workspace&project=project",
            defaultBranch: "main"
          }
        }
      ]
    })
  },
  {
    description: "Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository",
    example: yaml__default.default.stringify({
      steps: [
        {
          id: "publish",
          action: "publish:bitbucket",
          name: "Publish to Bitbucket",
          input: {
            repoUrl: "bitbucket.org?repo=repo&workspace=workspace&project=project",
            sourcePath: "./repoRoot"
          }
        }
      ]
    })
  },
  {
    description: "Initializes a Bitbucket repository with LFS enabled",
    example: yaml__default.default.stringify({
      steps: [
        {
          id: "publish",
          action: "publish:bitbucket",
          name: "Publish to Bitbucket",
          input: {
            repoUrl: "hosted.bitbucket.com?project=project&repo=repo",
            enableLFS: true
          }
        }
      ]
    })
  },
  {
    description: "Initializes a Bitbucket repository with a custom authentication token",
    example: yaml__default.default.stringify({
      steps: [
        {
          id: "publish",
          action: "publish:bitbucket",
          name: "Publish to Bitbucket",
          input: {
            repoUrl: "bitbucket.org?repo=repo&workspace=workspace&project=project",
            token: "your-auth-token"
          }
        }
      ]
    })
  },
  {
    description: "Initializes a Bitbucket repository with an initial commit message, if not set defaults to `initial commit`",
    example: yaml__default.default.stringify({
      steps: [
        {
          id: "publish",
          action: "publish:bitbucket",
          name: "Publish to Bitbucket",
          input: {
            repoUrl: "bitbucket.org?repo=repo&workspace=workspace&project=project",
            gitCommitMessage: "Initial commit with custom message"
          }
        }
      ]
    })
  },
  {
    description: "Initializes a Bitbucket repository with a custom author",
    example: yaml__default.default.stringify({
      steps: [
        {
          id: "publish",
          action: "publish:bitbucket",
          name: "Publish to Bitbucket",
          input: {
            repoUrl: "bitbucket.org?repo=repo&workspace=workspace&project=project",
            gitAuthorName: "Your Name",
            gitAuthorEmail: "your.email@example.com"
          }
        }
      ]
    })
  },
  {
    description: "Initializes a Bitbucket repository with all proporties being set",
    example: yaml__default.default.stringify({
      steps: [
        {
          id: "publish",
          action: "publish:bitbucket",
          name: "Publish to Bitbucket",
          input: {
            repoUrl: "bitbucket.org?repo=repo&workspace=workspace&project=project",
            description: "Initialize a git repository",
            repoVisibility: "public",
            defaultBranch: "main",
            token: "your-auth-token",
            gitCommitMessage: "Initial commit with custom message",
            gitAuthorName: "Your Name",
            gitAuthorEmail: "your.email@example.com"
          }
        }
      ]
    })
  }
];

const createBitbucketCloudRepository = async (opts) => {
  const {
    workspace,
    project,
    repo,
    description,
    repoVisibility,
    mainBranch,
    authorization,
    apiBaseUrl
  } = opts;
  const options = {
    method: "POST",
    body: JSON.stringify({
      scm: "git",
      description,
      is_private: repoVisibility === "private",
      project: { key: project }
    }),
    headers: {
      Authorization: authorization,
      "Content-Type": "application/json"
    }
  };
  let response;
  try {
    response = await fetch__default.default(
      `${apiBaseUrl}/repositories/${workspace}/${repo}`,
      options
    );
  } catch (e) {
    throw new Error(`Unable to create repository, ${e}`);
  }
  if (response.status !== 200) {
    throw new Error(
      `Unable to create repository, ${response.status} ${response.statusText}, ${await response.text()}`
    );
  }
  const r = await response.json();
  let remoteUrl = "";
  for (const link of r.links.clone) {
    if (link.name === "https") {
      remoteUrl = link.href;
    }
  }
  const repoContentsUrl = `${r.links.html.href}/src/${mainBranch}`;
  return { remoteUrl, repoContentsUrl };
};
const createBitbucketServerRepository = async (opts) => {
  const {
    project,
    repo,
    description,
    authorization,
    repoVisibility,
    apiBaseUrl
  } = opts;
  let response;
  const options = {
    method: "POST",
    body: JSON.stringify({
      name: repo,
      description,
      public: repoVisibility === "public"
    }),
    headers: {
      Authorization: authorization,
      "Content-Type": "application/json"
    }
  };
  try {
    response = await fetch__default.default(`${apiBaseUrl}/projects/${project}/repos`, options);
  } catch (e) {
    throw new Error(`Unable to create repository, ${e}`);
  }
  if (response.status !== 201) {
    throw new Error(
      `Unable to create repository, ${response.status} ${response.statusText}, ${await response.text()}`
    );
  }
  const r = await response.json();
  let remoteUrl = "";
  for (const link of r.links.clone) {
    if (link.name === "http") {
      remoteUrl = link.href;
    }
  }
  const repoContentsUrl = `${r.links.self[0].href}`;
  return { remoteUrl, repoContentsUrl };
};
const getAuthorizationHeader = (config) => {
  if (config.username && config.appPassword) {
    const buffer = Buffer.from(
      `${config.username}:${config.appPassword}`,
      "utf8"
    );
    return `Basic ${buffer.toString("base64")}`;
  }
  if (config.token) {
    return `Bearer ${config.token}`;
  }
  throw new Error(
    `Authorization has not been provided for Bitbucket. Please add either username + appPassword or token to the Integrations config`
  );
};
const performEnableLFS = async (opts) => {
  const { authorization, host, project, repo } = opts;
  const options = {
    method: "PUT",
    headers: {
      Authorization: authorization
    }
  };
  const { ok, status, statusText } = await fetch__default.default(
    `https://${host}/rest/git-lfs/admin/projects/${project}/repos/${repo}/enabled`,
    options
  );
  if (!ok)
    throw new Error(
      `Failed to enable LFS in the repository, ${status}: ${statusText}`
    );
};
function createPublishBitbucketAction(options) {
  const { integrations, config } = options;
  return pluginScaffolderNode.createTemplateAction({
    id: "publish:bitbucket",
    description: "Initializes a git repository of the content in the workspace, and publishes it to Bitbucket.",
    examples,
    schema: {
      input: {
        type: "object",
        required: ["repoUrl"],
        properties: {
          repoUrl: {
            title: "Repository Location",
            type: "string"
          },
          description: {
            title: "Repository Description",
            type: "string"
          },
          repoVisibility: {
            title: "Repository Visibility",
            type: "string",
            enum: ["private", "public"]
          },
          defaultBranch: {
            title: "Default Branch",
            type: "string",
            description: `Sets the default branch on the repository. The default value is 'master'`
          },
          sourcePath: {
            title: "Source Path",
            description: "Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.",
            type: "string"
          },
          enableLFS: {
            title: "Enable LFS?",
            description: "Enable LFS for the repository. Only available for hosted Bitbucket.",
            type: "boolean"
          },
          token: {
            title: "Authentication Token",
            type: "string",
            description: "The token to use for authorization to BitBucket"
          },
          gitCommitMessage: {
            title: "Git Commit Message",
            type: "string",
            description: `Sets the commit message on the repository. The default value is 'initial commit'`
          },
          gitAuthorName: {
            title: "Default Author Name",
            type: "string",
            description: `Sets the default author name for the commit. The default value is 'Scaffolder'`
          },
          gitAuthorEmail: {
            title: "Default Author Email",
            type: "string",
            description: `Sets the default author email for the commit.`
          }
        }
      },
      output: {
        type: "object",
        properties: {
          remoteUrl: {
            title: "A URL to the repository with the provider",
            type: "string"
          },
          repoContentsUrl: {
            title: "A URL to the root of the repository",
            type: "string"
          },
          commitHash: {
            title: "The git commit hash of the initial commit",
            type: "string"
          }
        }
      }
    },
    async handler(ctx) {
      var _a;
      ctx.logger.warn(
        `[Deprecated] Please migrate the use of action "publish:bitbucket" to "publish:bitbucketCloud" or "publish:bitbucketServer".`
      );
      const {
        repoUrl,
        description,
        defaultBranch = "master",
        repoVisibility = "private",
        enableLFS = false,
        gitCommitMessage = "initial commit",
        gitAuthorName,
        gitAuthorEmail
      } = ctx.input;
      const { workspace, project, repo, host } = pluginScaffolderNode.parseRepoUrl(
        repoUrl,
        integrations
      );
      if (host === "bitbucket.org") {
        if (!workspace) {
          throw new errors.InputError(
            `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing workspace`
          );
        }
      }
      if (!project) {
        throw new errors.InputError(
          `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing project`
        );
      }
      const integrationConfig = integrations.bitbucket.byHost(host);
      if (!integrationConfig) {
        throw new errors.InputError(
          `No matching integration configuration for host ${host}, please check your integrations config`
        );
      }
      const authorization = getAuthorizationHeader(
        ctx.input.token ? {
          host: integrationConfig.config.host,
          apiBaseUrl: integrationConfig.config.apiBaseUrl,
          token: ctx.input.token
        } : integrationConfig.config
      );
      const apiBaseUrl = integrationConfig.config.apiBaseUrl;
      const createMethod = host === "bitbucket.org" ? createBitbucketCloudRepository : createBitbucketServerRepository;
      const { remoteUrl, repoContentsUrl } = await createMethod({
        authorization,
        workspace: workspace || "",
        project,
        repo,
        repoVisibility,
        mainBranch: defaultBranch,
        description,
        apiBaseUrl
      });
      const gitAuthorInfo = {
        name: gitAuthorName ? gitAuthorName : config.getOptionalString("scaffolder.defaultAuthor.name"),
        email: gitAuthorEmail ? gitAuthorEmail : config.getOptionalString("scaffolder.defaultAuthor.email")
      };
      let auth;
      if (ctx.input.token) {
        auth = {
          username: "x-token-auth",
          password: ctx.input.token
        };
      } else {
        auth = {
          username: integrationConfig.config.username ? integrationConfig.config.username : "x-token-auth",
          password: integrationConfig.config.appPassword ? integrationConfig.config.appPassword : (_a = integrationConfig.config.token) != null ? _a : ""
        };
      }
      const commitResult = await pluginScaffolderNode.initRepoAndPush({
        dir: pluginScaffolderNode.getRepoSourceDirectory(ctx.workspacePath, ctx.input.sourcePath),
        remoteUrl,
        auth,
        defaultBranch,
        logger: ctx.logger,
        commitMessage: gitCommitMessage ? gitCommitMessage : config.getOptionalString("scaffolder.defaultCommitMessage"),
        gitAuthorInfo
      });
      if (enableLFS && host !== "bitbucket.org") {
        await performEnableLFS({ authorization, host, project, repo });
      }
      ctx.output("commitHash", commitResult == null ? void 0 : commitResult.commitHash);
      ctx.output("remoteUrl", remoteUrl);
      ctx.output("repoContentsUrl", repoContentsUrl);
    }
  });
}

const createPublishBitbucketCloudAction = bitbucketCloud__namespace.createPublishBitbucketCloudAction;
const createBitbucketPipelinesRunAction = bitbucketCloud__namespace.createBitbucketPipelinesRunAction;
const createPublishBitbucketServerAction = bitbucketServer__namespace.createPublishBitbucketServerAction;
const createPublishBitbucketServerPullRequestAction = bitbucketServer__namespace.createPublishBitbucketServerPullRequestAction;

const bitbucketModule = backendPluginApi.createBackendModule({
  moduleId: "bitbucket",
  pluginId: "scaffolder",
  register({ registerInit }) {
    registerInit({
      deps: {
        scaffolder: alpha.scaffolderActionsExtensionPoint,
        config: backendPluginApi.coreServices.rootConfig
      },
      async init({ scaffolder, config }) {
        const integrations = integration.ScmIntegrations.fromConfig(config);
        scaffolder.addActions(
          createPublishBitbucketCloudAction({ integrations, config }),
          createPublishBitbucketServerAction({ integrations, config }),
          createPublishBitbucketServerPullRequestAction({
            integrations,
            config
          }),
          createBitbucketPipelinesRunAction({ integrations })
        );
      }
    });
  }
});

exports.createBitbucketPipelinesRunAction = createBitbucketPipelinesRunAction;
exports.createPublishBitbucketAction = createPublishBitbucketAction;
exports.createPublishBitbucketCloudAction = createPublishBitbucketCloudAction;
exports.createPublishBitbucketServerAction = createPublishBitbucketServerAction;
exports.createPublishBitbucketServerPullRequestAction = createPublishBitbucketServerPullRequestAction;
exports.default = bitbucketModule;
//# sourceMappingURL=index.cjs.js.map
